10a11
> import org.slf4j.{ Logger, LoggerFactory }
433,435c435,453
<   def decodeThis(cursor: HCursor)(implicit params: DecoderParams): Try[Bundle] =
<     checkUnknownFields(cursor, otherMetas, refMetas) flatMap (_ =>
<       Try(
---
>   private val log: Logger       = LoggerFactory.getLogger(getClass)
>   def decodeThis(cursor: HCursor)(implicit params: DecoderParams): Try[Bundle] =
>   checkUnknownFields(cursor, otherMetas, refMetas) flatMap (_ => 
>     Try {
>       val entries: LitSeq[Entry] =
>         if (!params.tolerantBundleDecoding) cursor.decodeAs[LitSeq[Entry]]("entry", Some(LitSeq.empty))
>         else
>           cursor.downField("entry")
>             .arrayCursors
>             .getOrElse(Iterable.empty)
>             .to(LitSeq)
>             .flatMap(j => j.as[Entry] match {
>               case Left(l) =>
>                 log.error(
>                   s"failed to decode bundle field. Skipping because tolerantBundleDecoding = true. Json was ${j}, Error was:",
>                   l)
>                 None
>               case Right(x) => Some(x)
>             })
368c385
<           cursor.decodeAs[LitSeq[Bundle.Entry]]("entry", Some(LitSeq.empty)),
---
>           entries,
370c386
<       ))
---
>       })
