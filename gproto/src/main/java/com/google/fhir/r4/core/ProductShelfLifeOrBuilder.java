// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/google/fhir/proto/r4/core/datatypes.proto

package com.google.fhir.r4.core;

public interface ProductShelfLifeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.fhir.r4.core.ProductShelfLife)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique id for inter-element referencing
   * </pre>
   *
   * <code>.google.fhir.r4.core.String id = 1;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <pre>
   * Unique id for inter-element referencing
   * </pre>
   *
   * <code>.google.fhir.r4.core.String id = 1;</code>
   * @return The id.
   */
  com.google.fhir.r4.core.String getId();
  /**
   * <pre>
   * Unique id for inter-element referencing
   * </pre>
   *
   * <code>.google.fhir.r4.core.String id = 1;</code>
   */
  com.google.fhir.r4.core.StringOrBuilder getIdOrBuilder();

  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  java.util.List<com.google.fhir.r4.core.Extension> 
      getExtensionList();
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  com.google.fhir.r4.core.Extension getExtension(int index);
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  int getExtensionCount();
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  java.util.List<? extends com.google.fhir.r4.core.ExtensionOrBuilder> 
      getExtensionOrBuilderList();
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  com.google.fhir.r4.core.ExtensionOrBuilder getExtensionOrBuilder(
      int index);

  /**
   * <pre>
   * Extensions that cannot be ignored even if unrecognized
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
   */
  java.util.List<com.google.fhir.r4.core.Extension> 
      getModifierExtensionList();
  /**
   * <pre>
   * Extensions that cannot be ignored even if unrecognized
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
   */
  com.google.fhir.r4.core.Extension getModifierExtension(int index);
  /**
   * <pre>
   * Extensions that cannot be ignored even if unrecognized
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
   */
  int getModifierExtensionCount();
  /**
   * <pre>
   * Extensions that cannot be ignored even if unrecognized
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
   */
  java.util.List<? extends com.google.fhir.r4.core.ExtensionOrBuilder> 
      getModifierExtensionOrBuilderList();
  /**
   * <pre>
   * Extensions that cannot be ignored even if unrecognized
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
   */
  com.google.fhir.r4.core.ExtensionOrBuilder getModifierExtensionOrBuilder(
      int index);

  /**
   * <pre>
   * Unique identifier for the packaged Medicinal Product
   * </pre>
   *
   * <code>.google.fhir.r4.core.Identifier identifier = 4;</code>
   * @return Whether the identifier field is set.
   */
  boolean hasIdentifier();
  /**
   * <pre>
   * Unique identifier for the packaged Medicinal Product
   * </pre>
   *
   * <code>.google.fhir.r4.core.Identifier identifier = 4;</code>
   * @return The identifier.
   */
  com.google.fhir.r4.core.Identifier getIdentifier();
  /**
   * <pre>
   * Unique identifier for the packaged Medicinal Product
   * </pre>
   *
   * <code>.google.fhir.r4.core.Identifier identifier = 4;</code>
   */
  com.google.fhir.r4.core.IdentifierOrBuilder getIdentifierOrBuilder();

  /**
   * <pre>
   * This describes the shelf life, taking into account various scenarios such
   * as shelf life of the packaged Medicinal Product itself, shelf life after
   * transformation where necessary and shelf life after the first opening of a
   * bottle, etc. The shelf life type shall be specified using an appropriate
   * controlled vocabulary The controlled term and the controlled term
   * identifier shall be specified
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept type = 5 [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];</code>
   * @return Whether the type field is set.
   */
  boolean hasType();
  /**
   * <pre>
   * This describes the shelf life, taking into account various scenarios such
   * as shelf life of the packaged Medicinal Product itself, shelf life after
   * transformation where necessary and shelf life after the first opening of a
   * bottle, etc. The shelf life type shall be specified using an appropriate
   * controlled vocabulary The controlled term and the controlled term
   * identifier shall be specified
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept type = 5 [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];</code>
   * @return The type.
   */
  com.google.fhir.r4.core.CodeableConcept getType();
  /**
   * <pre>
   * This describes the shelf life, taking into account various scenarios such
   * as shelf life of the packaged Medicinal Product itself, shelf life after
   * transformation where necessary and shelf life after the first opening of a
   * bottle, etc. The shelf life type shall be specified using an appropriate
   * controlled vocabulary The controlled term and the controlled term
   * identifier shall be specified
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept type = 5 [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];</code>
   */
  com.google.fhir.r4.core.CodeableConceptOrBuilder getTypeOrBuilder();

  /**
   * <pre>
   * The shelf life time period can be specified using a numerical value for the
   * period of time and its unit of time measurement The unit of measurement
   * shall be specified in accordance with ISO 11240 and the resulting
   * terminology The symbol and the symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity period = 6 [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];</code>
   * @return Whether the period field is set.
   */
  boolean hasPeriod();
  /**
   * <pre>
   * The shelf life time period can be specified using a numerical value for the
   * period of time and its unit of time measurement The unit of measurement
   * shall be specified in accordance with ISO 11240 and the resulting
   * terminology The symbol and the symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity period = 6 [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];</code>
   * @return The period.
   */
  com.google.fhir.r4.core.Quantity getPeriod();
  /**
   * <pre>
   * The shelf life time period can be specified using a numerical value for the
   * period of time and its unit of time measurement The unit of measurement
   * shall be specified in accordance with ISO 11240 and the resulting
   * terminology The symbol and the symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity period = 6 [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];</code>
   */
  com.google.fhir.r4.core.QuantityOrBuilder getPeriodOrBuilder();

  /**
   * <pre>
   * Special precautions for storage, if any, can be specified using an
   * appropriate controlled vocabulary The controlled term and the controlled
   * term identifier shall be specified
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.CodeableConcept special_precautions_for_storage = 7;</code>
   */
  java.util.List<com.google.fhir.r4.core.CodeableConcept> 
      getSpecialPrecautionsForStorageList();
  /**
   * <pre>
   * Special precautions for storage, if any, can be specified using an
   * appropriate controlled vocabulary The controlled term and the controlled
   * term identifier shall be specified
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.CodeableConcept special_precautions_for_storage = 7;</code>
   */
  com.google.fhir.r4.core.CodeableConcept getSpecialPrecautionsForStorage(int index);
  /**
   * <pre>
   * Special precautions for storage, if any, can be specified using an
   * appropriate controlled vocabulary The controlled term and the controlled
   * term identifier shall be specified
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.CodeableConcept special_precautions_for_storage = 7;</code>
   */
  int getSpecialPrecautionsForStorageCount();
  /**
   * <pre>
   * Special precautions for storage, if any, can be specified using an
   * appropriate controlled vocabulary The controlled term and the controlled
   * term identifier shall be specified
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.CodeableConcept special_precautions_for_storage = 7;</code>
   */
  java.util.List<? extends com.google.fhir.r4.core.CodeableConceptOrBuilder> 
      getSpecialPrecautionsForStorageOrBuilderList();
  /**
   * <pre>
   * Special precautions for storage, if any, can be specified using an
   * appropriate controlled vocabulary The controlled term and the controlled
   * term identifier shall be specified
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.CodeableConcept special_precautions_for_storage = 7;</code>
   */
  com.google.fhir.r4.core.CodeableConceptOrBuilder getSpecialPrecautionsForStorageOrBuilder(
      int index);
}
