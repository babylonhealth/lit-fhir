// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/google/fhir/proto/r4/core/extensions.proto

package com.google.fhir.r4.core;

public interface ObservationAlleleOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.fhir.r4.core.ObservationAllele)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique id for inter-element referencing
   * </pre>
   *
   * <code>.google.fhir.r4.core.String id = 1;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <pre>
   * Unique id for inter-element referencing
   * </pre>
   *
   * <code>.google.fhir.r4.core.String id = 1;</code>
   * @return The id.
   */
  com.google.fhir.r4.core.String getId();
  /**
   * <pre>
   * Unique id for inter-element referencing
   * </pre>
   *
   * <code>.google.fhir.r4.core.String id = 1;</code>
   */
  com.google.fhir.r4.core.StringOrBuilder getIdOrBuilder();

  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  java.util.List<com.google.fhir.r4.core.Extension> 
      getExtensionList();
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  com.google.fhir.r4.core.Extension getExtension(int index);
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  int getExtensionCount();
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  java.util.List<? extends com.google.fhir.r4.core.ExtensionOrBuilder> 
      getExtensionOrBuilderList();
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  com.google.fhir.r4.core.ExtensionOrBuilder getExtensionOrBuilder(
      int index);

  /**
   * <pre>
   * Name of allele
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept name = 4 [json_name = "Name"];</code>
   * @return Whether the name field is set.
   */
  boolean hasName();
  /**
   * <pre>
   * Name of allele
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept name = 4 [json_name = "Name"];</code>
   * @return The name.
   */
  com.google.fhir.r4.core.CodeableConcept getName();
  /**
   * <pre>
   * Name of allele
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept name = 4 [json_name = "Name"];</code>
   */
  com.google.fhir.r4.core.CodeableConceptOrBuilder getNameOrBuilder();

  /**
   * <pre>
   * The level of occurrence of a single DNA sequence variant within a set of
   * chromosomes: Heteroplasmic / Homoplasmic / Homozygous / Heterozygous /
   * Hemizygous
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept state = 5 [json_name = "State"];</code>
   * @return Whether the state field is set.
   */
  boolean hasState();
  /**
   * <pre>
   * The level of occurrence of a single DNA sequence variant within a set of
   * chromosomes: Heteroplasmic / Homoplasmic / Homozygous / Heterozygous /
   * Hemizygous
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept state = 5 [json_name = "State"];</code>
   * @return The state.
   */
  com.google.fhir.r4.core.CodeableConcept getState();
  /**
   * <pre>
   * The level of occurrence of a single DNA sequence variant within a set of
   * chromosomes: Heteroplasmic / Homoplasmic / Homozygous / Heterozygous /
   * Hemizygous
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept state = 5 [json_name = "State"];</code>
   */
  com.google.fhir.r4.core.CodeableConceptOrBuilder getStateOrBuilder();

  /**
   * <pre>
   * Allele frequency
   * </pre>
   *
   * <code>.google.fhir.r4.core.Decimal frequency = 6 [json_name = "Frequency"];</code>
   * @return Whether the frequency field is set.
   */
  boolean hasFrequency();
  /**
   * <pre>
   * Allele frequency
   * </pre>
   *
   * <code>.google.fhir.r4.core.Decimal frequency = 6 [json_name = "Frequency"];</code>
   * @return The frequency.
   */
  com.google.fhir.r4.core.Decimal getFrequency();
  /**
   * <pre>
   * Allele frequency
   * </pre>
   *
   * <code>.google.fhir.r4.core.Decimal frequency = 6 [json_name = "Frequency"];</code>
   */
  com.google.fhir.r4.core.DecimalOrBuilder getFrequencyOrBuilder();
}
