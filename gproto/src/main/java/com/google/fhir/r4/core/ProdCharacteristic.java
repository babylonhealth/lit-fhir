// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/google/fhir/proto/r4/core/datatypes.proto

package com.google.fhir.r4.core;

/**
 * <pre>
 * Auto-generated from StructureDefinition for ProdCharacteristic, last updated
 * 2019-11-01T09:29:23.356+11:00. The marketing status describes the date when a
 * medicinal product is actually put on the market or the date as of which it is
 * no longer available. See
 * http://hl7.org/fhir/StructureDefinition/ProdCharacteristic
 * </pre>
 *
 * Protobuf type {@code google.fhir.r4.core.ProdCharacteristic}
 */
public final class ProdCharacteristic extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.fhir.r4.core.ProdCharacteristic)
    ProdCharacteristicOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ProdCharacteristic.newBuilder() to construct.
  private ProdCharacteristic(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ProdCharacteristic() {
    extension_ = java.util.Collections.emptyList();
    modifierExtension_ = java.util.Collections.emptyList();
    color_ = java.util.Collections.emptyList();
    imprint_ = java.util.Collections.emptyList();
    image_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ProdCharacteristic();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ProdCharacteristic(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.google.fhir.r4.core.String.Builder subBuilder = null;
            if (id_ != null) {
              subBuilder = id_.toBuilder();
            }
            id_ = input.readMessage(com.google.fhir.r4.core.String.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(id_);
              id_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              extension_ = new java.util.ArrayList<com.google.fhir.r4.core.Extension>();
              mutable_bitField0_ |= 0x00000001;
            }
            extension_.add(
                input.readMessage(com.google.fhir.r4.core.Extension.parser(), extensionRegistry));
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              modifierExtension_ = new java.util.ArrayList<com.google.fhir.r4.core.Extension>();
              mutable_bitField0_ |= 0x00000002;
            }
            modifierExtension_.add(
                input.readMessage(com.google.fhir.r4.core.Extension.parser(), extensionRegistry));
            break;
          }
          case 34: {
            com.google.fhir.r4.core.Quantity.Builder subBuilder = null;
            if (height_ != null) {
              subBuilder = height_.toBuilder();
            }
            height_ = input.readMessage(com.google.fhir.r4.core.Quantity.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(height_);
              height_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            com.google.fhir.r4.core.Quantity.Builder subBuilder = null;
            if (width_ != null) {
              subBuilder = width_.toBuilder();
            }
            width_ = input.readMessage(com.google.fhir.r4.core.Quantity.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(width_);
              width_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            com.google.fhir.r4.core.Quantity.Builder subBuilder = null;
            if (depth_ != null) {
              subBuilder = depth_.toBuilder();
            }
            depth_ = input.readMessage(com.google.fhir.r4.core.Quantity.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(depth_);
              depth_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            com.google.fhir.r4.core.Quantity.Builder subBuilder = null;
            if (weight_ != null) {
              subBuilder = weight_.toBuilder();
            }
            weight_ = input.readMessage(com.google.fhir.r4.core.Quantity.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(weight_);
              weight_ = subBuilder.buildPartial();
            }

            break;
          }
          case 66: {
            com.google.fhir.r4.core.Quantity.Builder subBuilder = null;
            if (nominalVolume_ != null) {
              subBuilder = nominalVolume_.toBuilder();
            }
            nominalVolume_ = input.readMessage(com.google.fhir.r4.core.Quantity.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(nominalVolume_);
              nominalVolume_ = subBuilder.buildPartial();
            }

            break;
          }
          case 74: {
            com.google.fhir.r4.core.Quantity.Builder subBuilder = null;
            if (externalDiameter_ != null) {
              subBuilder = externalDiameter_.toBuilder();
            }
            externalDiameter_ = input.readMessage(com.google.fhir.r4.core.Quantity.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(externalDiameter_);
              externalDiameter_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            com.google.fhir.r4.core.String.Builder subBuilder = null;
            if (shape_ != null) {
              subBuilder = shape_.toBuilder();
            }
            shape_ = input.readMessage(com.google.fhir.r4.core.String.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(shape_);
              shape_ = subBuilder.buildPartial();
            }

            break;
          }
          case 90: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              color_ = new java.util.ArrayList<com.google.fhir.r4.core.String>();
              mutable_bitField0_ |= 0x00000004;
            }
            color_.add(
                input.readMessage(com.google.fhir.r4.core.String.parser(), extensionRegistry));
            break;
          }
          case 98: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              imprint_ = new java.util.ArrayList<com.google.fhir.r4.core.String>();
              mutable_bitField0_ |= 0x00000008;
            }
            imprint_.add(
                input.readMessage(com.google.fhir.r4.core.String.parser(), extensionRegistry));
            break;
          }
          case 106: {
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              image_ = new java.util.ArrayList<com.google.fhir.r4.core.Attachment>();
              mutable_bitField0_ |= 0x00000010;
            }
            image_.add(
                input.readMessage(com.google.fhir.r4.core.Attachment.parser(), extensionRegistry));
            break;
          }
          case 114: {
            com.google.fhir.r4.core.CodeableConcept.Builder subBuilder = null;
            if (scoring_ != null) {
              subBuilder = scoring_.toBuilder();
            }
            scoring_ = input.readMessage(com.google.fhir.r4.core.CodeableConcept.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(scoring_);
              scoring_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        extension_ = java.util.Collections.unmodifiableList(extension_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        modifierExtension_ = java.util.Collections.unmodifiableList(modifierExtension_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        color_ = java.util.Collections.unmodifiableList(color_);
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        imprint_ = java.util.Collections.unmodifiableList(imprint_);
      }
      if (((mutable_bitField0_ & 0x00000010) != 0)) {
        image_ = java.util.Collections.unmodifiableList(image_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.fhir.r4.core.Datatypes.internal_static_google_fhir_r4_core_ProdCharacteristic_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.fhir.r4.core.Datatypes.internal_static_google_fhir_r4_core_ProdCharacteristic_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.fhir.r4.core.ProdCharacteristic.class, com.google.fhir.r4.core.ProdCharacteristic.Builder.class);
  }

  public static final int ID_FIELD_NUMBER = 1;
  private com.google.fhir.r4.core.String id_;
  /**
   * <pre>
   * Unique id for inter-element referencing
   * </pre>
   *
   * <code>.google.fhir.r4.core.String id = 1;</code>
   * @return Whether the id field is set.
   */
  @java.lang.Override
  public boolean hasId() {
    return id_ != null;
  }
  /**
   * <pre>
   * Unique id for inter-element referencing
   * </pre>
   *
   * <code>.google.fhir.r4.core.String id = 1;</code>
   * @return The id.
   */
  @java.lang.Override
  public com.google.fhir.r4.core.String getId() {
    return id_ == null ? com.google.fhir.r4.core.String.getDefaultInstance() : id_;
  }
  /**
   * <pre>
   * Unique id for inter-element referencing
   * </pre>
   *
   * <code>.google.fhir.r4.core.String id = 1;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.StringOrBuilder getIdOrBuilder() {
    return getId();
  }

  public static final int EXTENSION_FIELD_NUMBER = 2;
  private java.util.List<com.google.fhir.r4.core.Extension> extension_;
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.fhir.r4.core.Extension> getExtensionList() {
    return extension_;
  }
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.fhir.r4.core.ExtensionOrBuilder> 
      getExtensionOrBuilderList() {
    return extension_;
  }
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  @java.lang.Override
  public int getExtensionCount() {
    return extension_.size();
  }
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.Extension getExtension(int index) {
    return extension_.get(index);
  }
  /**
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.ExtensionOrBuilder getExtensionOrBuilder(
      int index) {
    return extension_.get(index);
  }

  public static final int MODIFIER_EXTENSION_FIELD_NUMBER = 3;
  private java.util.List<com.google.fhir.r4.core.Extension> modifierExtension_;
  /**
   * <pre>
   * Extensions that cannot be ignored even if unrecognized
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.fhir.r4.core.Extension> getModifierExtensionList() {
    return modifierExtension_;
  }
  /**
   * <pre>
   * Extensions that cannot be ignored even if unrecognized
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.fhir.r4.core.ExtensionOrBuilder> 
      getModifierExtensionOrBuilderList() {
    return modifierExtension_;
  }
  /**
   * <pre>
   * Extensions that cannot be ignored even if unrecognized
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
   */
  @java.lang.Override
  public int getModifierExtensionCount() {
    return modifierExtension_.size();
  }
  /**
   * <pre>
   * Extensions that cannot be ignored even if unrecognized
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.Extension getModifierExtension(int index) {
    return modifierExtension_.get(index);
  }
  /**
   * <pre>
   * Extensions that cannot be ignored even if unrecognized
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.ExtensionOrBuilder getModifierExtensionOrBuilder(
      int index) {
    return modifierExtension_.get(index);
  }

  public static final int HEIGHT_FIELD_NUMBER = 4;
  private com.google.fhir.r4.core.Quantity height_;
  /**
   * <pre>
   * Where applicable, the height can be specified using a numerical value and
   * its unit of measurement The unit of measurement shall be specified in
   * accordance with ISO 11240 and the resulting terminology The symbol and the
   * symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity height = 4;</code>
   * @return Whether the height field is set.
   */
  @java.lang.Override
  public boolean hasHeight() {
    return height_ != null;
  }
  /**
   * <pre>
   * Where applicable, the height can be specified using a numerical value and
   * its unit of measurement The unit of measurement shall be specified in
   * accordance with ISO 11240 and the resulting terminology The symbol and the
   * symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity height = 4;</code>
   * @return The height.
   */
  @java.lang.Override
  public com.google.fhir.r4.core.Quantity getHeight() {
    return height_ == null ? com.google.fhir.r4.core.Quantity.getDefaultInstance() : height_;
  }
  /**
   * <pre>
   * Where applicable, the height can be specified using a numerical value and
   * its unit of measurement The unit of measurement shall be specified in
   * accordance with ISO 11240 and the resulting terminology The symbol and the
   * symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity height = 4;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.QuantityOrBuilder getHeightOrBuilder() {
    return getHeight();
  }

  public static final int WIDTH_FIELD_NUMBER = 5;
  private com.google.fhir.r4.core.Quantity width_;
  /**
   * <pre>
   * Where applicable, the width can be specified using a numerical value and
   * its unit of measurement The unit of measurement shall be specified in
   * accordance with ISO 11240 and the resulting terminology The symbol and the
   * symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity width = 5;</code>
   * @return Whether the width field is set.
   */
  @java.lang.Override
  public boolean hasWidth() {
    return width_ != null;
  }
  /**
   * <pre>
   * Where applicable, the width can be specified using a numerical value and
   * its unit of measurement The unit of measurement shall be specified in
   * accordance with ISO 11240 and the resulting terminology The symbol and the
   * symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity width = 5;</code>
   * @return The width.
   */
  @java.lang.Override
  public com.google.fhir.r4.core.Quantity getWidth() {
    return width_ == null ? com.google.fhir.r4.core.Quantity.getDefaultInstance() : width_;
  }
  /**
   * <pre>
   * Where applicable, the width can be specified using a numerical value and
   * its unit of measurement The unit of measurement shall be specified in
   * accordance with ISO 11240 and the resulting terminology The symbol and the
   * symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity width = 5;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.QuantityOrBuilder getWidthOrBuilder() {
    return getWidth();
  }

  public static final int DEPTH_FIELD_NUMBER = 6;
  private com.google.fhir.r4.core.Quantity depth_;
  /**
   * <pre>
   * Where applicable, the depth can be specified using a numerical value and
   * its unit of measurement The unit of measurement shall be specified in
   * accordance with ISO 11240 and the resulting terminology The symbol and the
   * symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity depth = 6;</code>
   * @return Whether the depth field is set.
   */
  @java.lang.Override
  public boolean hasDepth() {
    return depth_ != null;
  }
  /**
   * <pre>
   * Where applicable, the depth can be specified using a numerical value and
   * its unit of measurement The unit of measurement shall be specified in
   * accordance with ISO 11240 and the resulting terminology The symbol and the
   * symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity depth = 6;</code>
   * @return The depth.
   */
  @java.lang.Override
  public com.google.fhir.r4.core.Quantity getDepth() {
    return depth_ == null ? com.google.fhir.r4.core.Quantity.getDefaultInstance() : depth_;
  }
  /**
   * <pre>
   * Where applicable, the depth can be specified using a numerical value and
   * its unit of measurement The unit of measurement shall be specified in
   * accordance with ISO 11240 and the resulting terminology The symbol and the
   * symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity depth = 6;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.QuantityOrBuilder getDepthOrBuilder() {
    return getDepth();
  }

  public static final int WEIGHT_FIELD_NUMBER = 7;
  private com.google.fhir.r4.core.Quantity weight_;
  /**
   * <pre>
   * Where applicable, the weight can be specified using a numerical value and
   * its unit of measurement The unit of measurement shall be specified in
   * accordance with ISO 11240 and the resulting terminology The symbol and the
   * symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity weight = 7;</code>
   * @return Whether the weight field is set.
   */
  @java.lang.Override
  public boolean hasWeight() {
    return weight_ != null;
  }
  /**
   * <pre>
   * Where applicable, the weight can be specified using a numerical value and
   * its unit of measurement The unit of measurement shall be specified in
   * accordance with ISO 11240 and the resulting terminology The symbol and the
   * symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity weight = 7;</code>
   * @return The weight.
   */
  @java.lang.Override
  public com.google.fhir.r4.core.Quantity getWeight() {
    return weight_ == null ? com.google.fhir.r4.core.Quantity.getDefaultInstance() : weight_;
  }
  /**
   * <pre>
   * Where applicable, the weight can be specified using a numerical value and
   * its unit of measurement The unit of measurement shall be specified in
   * accordance with ISO 11240 and the resulting terminology The symbol and the
   * symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity weight = 7;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.QuantityOrBuilder getWeightOrBuilder() {
    return getWeight();
  }

  public static final int NOMINAL_VOLUME_FIELD_NUMBER = 8;
  private com.google.fhir.r4.core.Quantity nominalVolume_;
  /**
   * <pre>
   * Where applicable, the nominal volume can be specified using a numerical
   * value and its unit of measurement The unit of measurement shall be
   * specified in accordance with ISO 11240 and the resulting terminology The
   * symbol and the symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity nominal_volume = 8;</code>
   * @return Whether the nominalVolume field is set.
   */
  @java.lang.Override
  public boolean hasNominalVolume() {
    return nominalVolume_ != null;
  }
  /**
   * <pre>
   * Where applicable, the nominal volume can be specified using a numerical
   * value and its unit of measurement The unit of measurement shall be
   * specified in accordance with ISO 11240 and the resulting terminology The
   * symbol and the symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity nominal_volume = 8;</code>
   * @return The nominalVolume.
   */
  @java.lang.Override
  public com.google.fhir.r4.core.Quantity getNominalVolume() {
    return nominalVolume_ == null ? com.google.fhir.r4.core.Quantity.getDefaultInstance() : nominalVolume_;
  }
  /**
   * <pre>
   * Where applicable, the nominal volume can be specified using a numerical
   * value and its unit of measurement The unit of measurement shall be
   * specified in accordance with ISO 11240 and the resulting terminology The
   * symbol and the symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity nominal_volume = 8;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.QuantityOrBuilder getNominalVolumeOrBuilder() {
    return getNominalVolume();
  }

  public static final int EXTERNAL_DIAMETER_FIELD_NUMBER = 9;
  private com.google.fhir.r4.core.Quantity externalDiameter_;
  /**
   * <pre>
   * Where applicable, the external diameter can be specified using a numerical
   * value and its unit of measurement The unit of measurement shall be
   * specified in accordance with ISO 11240 and the resulting terminology The
   * symbol and the symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity external_diameter = 9;</code>
   * @return Whether the externalDiameter field is set.
   */
  @java.lang.Override
  public boolean hasExternalDiameter() {
    return externalDiameter_ != null;
  }
  /**
   * <pre>
   * Where applicable, the external diameter can be specified using a numerical
   * value and its unit of measurement The unit of measurement shall be
   * specified in accordance with ISO 11240 and the resulting terminology The
   * symbol and the symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity external_diameter = 9;</code>
   * @return The externalDiameter.
   */
  @java.lang.Override
  public com.google.fhir.r4.core.Quantity getExternalDiameter() {
    return externalDiameter_ == null ? com.google.fhir.r4.core.Quantity.getDefaultInstance() : externalDiameter_;
  }
  /**
   * <pre>
   * Where applicable, the external diameter can be specified using a numerical
   * value and its unit of measurement The unit of measurement shall be
   * specified in accordance with ISO 11240 and the resulting terminology The
   * symbol and the symbol identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.Quantity external_diameter = 9;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.QuantityOrBuilder getExternalDiameterOrBuilder() {
    return getExternalDiameter();
  }

  public static final int SHAPE_FIELD_NUMBER = 10;
  private com.google.fhir.r4.core.String shape_;
  /**
   * <pre>
   * Where applicable, the shape can be specified An appropriate controlled
   * vocabulary shall be used The term and the term identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.String shape = 10;</code>
   * @return Whether the shape field is set.
   */
  @java.lang.Override
  public boolean hasShape() {
    return shape_ != null;
  }
  /**
   * <pre>
   * Where applicable, the shape can be specified An appropriate controlled
   * vocabulary shall be used The term and the term identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.String shape = 10;</code>
   * @return The shape.
   */
  @java.lang.Override
  public com.google.fhir.r4.core.String getShape() {
    return shape_ == null ? com.google.fhir.r4.core.String.getDefaultInstance() : shape_;
  }
  /**
   * <pre>
   * Where applicable, the shape can be specified An appropriate controlled
   * vocabulary shall be used The term and the term identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.String shape = 10;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.StringOrBuilder getShapeOrBuilder() {
    return getShape();
  }

  public static final int COLOR_FIELD_NUMBER = 11;
  private java.util.List<com.google.fhir.r4.core.String> color_;
  /**
   * <pre>
   * Where applicable, the color can be specified An appropriate controlled
   * vocabulary shall be used The term and the term identifier shall be used
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String color = 11;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.fhir.r4.core.String> getColorList() {
    return color_;
  }
  /**
   * <pre>
   * Where applicable, the color can be specified An appropriate controlled
   * vocabulary shall be used The term and the term identifier shall be used
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String color = 11;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.fhir.r4.core.StringOrBuilder> 
      getColorOrBuilderList() {
    return color_;
  }
  /**
   * <pre>
   * Where applicable, the color can be specified An appropriate controlled
   * vocabulary shall be used The term and the term identifier shall be used
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String color = 11;</code>
   */
  @java.lang.Override
  public int getColorCount() {
    return color_.size();
  }
  /**
   * <pre>
   * Where applicable, the color can be specified An appropriate controlled
   * vocabulary shall be used The term and the term identifier shall be used
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String color = 11;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.String getColor(int index) {
    return color_.get(index);
  }
  /**
   * <pre>
   * Where applicable, the color can be specified An appropriate controlled
   * vocabulary shall be used The term and the term identifier shall be used
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String color = 11;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.StringOrBuilder getColorOrBuilder(
      int index) {
    return color_.get(index);
  }

  public static final int IMPRINT_FIELD_NUMBER = 12;
  private java.util.List<com.google.fhir.r4.core.String> imprint_;
  /**
   * <pre>
   * Where applicable, the imprint can be specified as text
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.fhir.r4.core.String> getImprintList() {
    return imprint_;
  }
  /**
   * <pre>
   * Where applicable, the imprint can be specified as text
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.fhir.r4.core.StringOrBuilder> 
      getImprintOrBuilderList() {
    return imprint_;
  }
  /**
   * <pre>
   * Where applicable, the imprint can be specified as text
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
   */
  @java.lang.Override
  public int getImprintCount() {
    return imprint_.size();
  }
  /**
   * <pre>
   * Where applicable, the imprint can be specified as text
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.String getImprint(int index) {
    return imprint_.get(index);
  }
  /**
   * <pre>
   * Where applicable, the imprint can be specified as text
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.StringOrBuilder getImprintOrBuilder(
      int index) {
    return imprint_.get(index);
  }

  public static final int IMAGE_FIELD_NUMBER = 13;
  private java.util.List<com.google.fhir.r4.core.Attachment> image_;
  /**
   * <pre>
   * Where applicable, the image can be provided The format of the image
   * attachment shall be specified by regional implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.fhir.r4.core.Attachment> getImageList() {
    return image_;
  }
  /**
   * <pre>
   * Where applicable, the image can be provided The format of the image
   * attachment shall be specified by regional implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.fhir.r4.core.AttachmentOrBuilder> 
      getImageOrBuilderList() {
    return image_;
  }
  /**
   * <pre>
   * Where applicable, the image can be provided The format of the image
   * attachment shall be specified by regional implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
   */
  @java.lang.Override
  public int getImageCount() {
    return image_.size();
  }
  /**
   * <pre>
   * Where applicable, the image can be provided The format of the image
   * attachment shall be specified by regional implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.Attachment getImage(int index) {
    return image_.get(index);
  }
  /**
   * <pre>
   * Where applicable, the image can be provided The format of the image
   * attachment shall be specified by regional implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.AttachmentOrBuilder getImageOrBuilder(
      int index) {
    return image_.get(index);
  }

  public static final int SCORING_FIELD_NUMBER = 14;
  private com.google.fhir.r4.core.CodeableConcept scoring_;
  /**
   * <pre>
   * Where applicable, the scoring can be specified An appropriate controlled
   * vocabulary shall be used The term and the term identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept scoring = 14;</code>
   * @return Whether the scoring field is set.
   */
  @java.lang.Override
  public boolean hasScoring() {
    return scoring_ != null;
  }
  /**
   * <pre>
   * Where applicable, the scoring can be specified An appropriate controlled
   * vocabulary shall be used The term and the term identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept scoring = 14;</code>
   * @return The scoring.
   */
  @java.lang.Override
  public com.google.fhir.r4.core.CodeableConcept getScoring() {
    return scoring_ == null ? com.google.fhir.r4.core.CodeableConcept.getDefaultInstance() : scoring_;
  }
  /**
   * <pre>
   * Where applicable, the scoring can be specified An appropriate controlled
   * vocabulary shall be used The term and the term identifier shall be used
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept scoring = 14;</code>
   */
  @java.lang.Override
  public com.google.fhir.r4.core.CodeableConceptOrBuilder getScoringOrBuilder() {
    return getScoring();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (id_ != null) {
      output.writeMessage(1, getId());
    }
    for (int i = 0; i < extension_.size(); i++) {
      output.writeMessage(2, extension_.get(i));
    }
    for (int i = 0; i < modifierExtension_.size(); i++) {
      output.writeMessage(3, modifierExtension_.get(i));
    }
    if (height_ != null) {
      output.writeMessage(4, getHeight());
    }
    if (width_ != null) {
      output.writeMessage(5, getWidth());
    }
    if (depth_ != null) {
      output.writeMessage(6, getDepth());
    }
    if (weight_ != null) {
      output.writeMessage(7, getWeight());
    }
    if (nominalVolume_ != null) {
      output.writeMessage(8, getNominalVolume());
    }
    if (externalDiameter_ != null) {
      output.writeMessage(9, getExternalDiameter());
    }
    if (shape_ != null) {
      output.writeMessage(10, getShape());
    }
    for (int i = 0; i < color_.size(); i++) {
      output.writeMessage(11, color_.get(i));
    }
    for (int i = 0; i < imprint_.size(); i++) {
      output.writeMessage(12, imprint_.get(i));
    }
    for (int i = 0; i < image_.size(); i++) {
      output.writeMessage(13, image_.get(i));
    }
    if (scoring_ != null) {
      output.writeMessage(14, getScoring());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (id_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getId());
    }
    for (int i = 0; i < extension_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, extension_.get(i));
    }
    for (int i = 0; i < modifierExtension_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, modifierExtension_.get(i));
    }
    if (height_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getHeight());
    }
    if (width_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getWidth());
    }
    if (depth_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getDepth());
    }
    if (weight_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getWeight());
    }
    if (nominalVolume_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getNominalVolume());
    }
    if (externalDiameter_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getExternalDiameter());
    }
    if (shape_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getShape());
    }
    for (int i = 0; i < color_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, color_.get(i));
    }
    for (int i = 0; i < imprint_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, imprint_.get(i));
    }
    for (int i = 0; i < image_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, image_.get(i));
    }
    if (scoring_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, getScoring());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.fhir.r4.core.ProdCharacteristic)) {
      return super.equals(obj);
    }
    com.google.fhir.r4.core.ProdCharacteristic other = (com.google.fhir.r4.core.ProdCharacteristic) obj;

    if (hasId() != other.hasId()) return false;
    if (hasId()) {
      if (!getId()
          .equals(other.getId())) return false;
    }
    if (!getExtensionList()
        .equals(other.getExtensionList())) return false;
    if (!getModifierExtensionList()
        .equals(other.getModifierExtensionList())) return false;
    if (hasHeight() != other.hasHeight()) return false;
    if (hasHeight()) {
      if (!getHeight()
          .equals(other.getHeight())) return false;
    }
    if (hasWidth() != other.hasWidth()) return false;
    if (hasWidth()) {
      if (!getWidth()
          .equals(other.getWidth())) return false;
    }
    if (hasDepth() != other.hasDepth()) return false;
    if (hasDepth()) {
      if (!getDepth()
          .equals(other.getDepth())) return false;
    }
    if (hasWeight() != other.hasWeight()) return false;
    if (hasWeight()) {
      if (!getWeight()
          .equals(other.getWeight())) return false;
    }
    if (hasNominalVolume() != other.hasNominalVolume()) return false;
    if (hasNominalVolume()) {
      if (!getNominalVolume()
          .equals(other.getNominalVolume())) return false;
    }
    if (hasExternalDiameter() != other.hasExternalDiameter()) return false;
    if (hasExternalDiameter()) {
      if (!getExternalDiameter()
          .equals(other.getExternalDiameter())) return false;
    }
    if (hasShape() != other.hasShape()) return false;
    if (hasShape()) {
      if (!getShape()
          .equals(other.getShape())) return false;
    }
    if (!getColorList()
        .equals(other.getColorList())) return false;
    if (!getImprintList()
        .equals(other.getImprintList())) return false;
    if (!getImageList()
        .equals(other.getImageList())) return false;
    if (hasScoring() != other.hasScoring()) return false;
    if (hasScoring()) {
      if (!getScoring()
          .equals(other.getScoring())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasId()) {
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
    }
    if (getExtensionCount() > 0) {
      hash = (37 * hash) + EXTENSION_FIELD_NUMBER;
      hash = (53 * hash) + getExtensionList().hashCode();
    }
    if (getModifierExtensionCount() > 0) {
      hash = (37 * hash) + MODIFIER_EXTENSION_FIELD_NUMBER;
      hash = (53 * hash) + getModifierExtensionList().hashCode();
    }
    if (hasHeight()) {
      hash = (37 * hash) + HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getHeight().hashCode();
    }
    if (hasWidth()) {
      hash = (37 * hash) + WIDTH_FIELD_NUMBER;
      hash = (53 * hash) + getWidth().hashCode();
    }
    if (hasDepth()) {
      hash = (37 * hash) + DEPTH_FIELD_NUMBER;
      hash = (53 * hash) + getDepth().hashCode();
    }
    if (hasWeight()) {
      hash = (37 * hash) + WEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getWeight().hashCode();
    }
    if (hasNominalVolume()) {
      hash = (37 * hash) + NOMINAL_VOLUME_FIELD_NUMBER;
      hash = (53 * hash) + getNominalVolume().hashCode();
    }
    if (hasExternalDiameter()) {
      hash = (37 * hash) + EXTERNAL_DIAMETER_FIELD_NUMBER;
      hash = (53 * hash) + getExternalDiameter().hashCode();
    }
    if (hasShape()) {
      hash = (37 * hash) + SHAPE_FIELD_NUMBER;
      hash = (53 * hash) + getShape().hashCode();
    }
    if (getColorCount() > 0) {
      hash = (37 * hash) + COLOR_FIELD_NUMBER;
      hash = (53 * hash) + getColorList().hashCode();
    }
    if (getImprintCount() > 0) {
      hash = (37 * hash) + IMPRINT_FIELD_NUMBER;
      hash = (53 * hash) + getImprintList().hashCode();
    }
    if (getImageCount() > 0) {
      hash = (37 * hash) + IMAGE_FIELD_NUMBER;
      hash = (53 * hash) + getImageList().hashCode();
    }
    if (hasScoring()) {
      hash = (37 * hash) + SCORING_FIELD_NUMBER;
      hash = (53 * hash) + getScoring().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.fhir.r4.core.ProdCharacteristic parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.fhir.r4.core.ProdCharacteristic parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.fhir.r4.core.ProdCharacteristic parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.fhir.r4.core.ProdCharacteristic parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.fhir.r4.core.ProdCharacteristic parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.fhir.r4.core.ProdCharacteristic parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.fhir.r4.core.ProdCharacteristic parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.fhir.r4.core.ProdCharacteristic parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.fhir.r4.core.ProdCharacteristic parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.fhir.r4.core.ProdCharacteristic parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.fhir.r4.core.ProdCharacteristic parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.fhir.r4.core.ProdCharacteristic parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.fhir.r4.core.ProdCharacteristic prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Auto-generated from StructureDefinition for ProdCharacteristic, last updated
   * 2019-11-01T09:29:23.356+11:00. The marketing status describes the date when a
   * medicinal product is actually put on the market or the date as of which it is
   * no longer available. See
   * http://hl7.org/fhir/StructureDefinition/ProdCharacteristic
   * </pre>
   *
   * Protobuf type {@code google.fhir.r4.core.ProdCharacteristic}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.fhir.r4.core.ProdCharacteristic)
      com.google.fhir.r4.core.ProdCharacteristicOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.fhir.r4.core.Datatypes.internal_static_google_fhir_r4_core_ProdCharacteristic_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.fhir.r4.core.Datatypes.internal_static_google_fhir_r4_core_ProdCharacteristic_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.fhir.r4.core.ProdCharacteristic.class, com.google.fhir.r4.core.ProdCharacteristic.Builder.class);
    }

    // Construct using com.google.fhir.r4.core.ProdCharacteristic.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getExtensionFieldBuilder();
        getModifierExtensionFieldBuilder();
        getColorFieldBuilder();
        getImprintFieldBuilder();
        getImageFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (idBuilder_ == null) {
        id_ = null;
      } else {
        id_ = null;
        idBuilder_ = null;
      }
      if (extensionBuilder_ == null) {
        extension_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        extensionBuilder_.clear();
      }
      if (modifierExtensionBuilder_ == null) {
        modifierExtension_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        modifierExtensionBuilder_.clear();
      }
      if (heightBuilder_ == null) {
        height_ = null;
      } else {
        height_ = null;
        heightBuilder_ = null;
      }
      if (widthBuilder_ == null) {
        width_ = null;
      } else {
        width_ = null;
        widthBuilder_ = null;
      }
      if (depthBuilder_ == null) {
        depth_ = null;
      } else {
        depth_ = null;
        depthBuilder_ = null;
      }
      if (weightBuilder_ == null) {
        weight_ = null;
      } else {
        weight_ = null;
        weightBuilder_ = null;
      }
      if (nominalVolumeBuilder_ == null) {
        nominalVolume_ = null;
      } else {
        nominalVolume_ = null;
        nominalVolumeBuilder_ = null;
      }
      if (externalDiameterBuilder_ == null) {
        externalDiameter_ = null;
      } else {
        externalDiameter_ = null;
        externalDiameterBuilder_ = null;
      }
      if (shapeBuilder_ == null) {
        shape_ = null;
      } else {
        shape_ = null;
        shapeBuilder_ = null;
      }
      if (colorBuilder_ == null) {
        color_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        colorBuilder_.clear();
      }
      if (imprintBuilder_ == null) {
        imprint_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        imprintBuilder_.clear();
      }
      if (imageBuilder_ == null) {
        image_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
      } else {
        imageBuilder_.clear();
      }
      if (scoringBuilder_ == null) {
        scoring_ = null;
      } else {
        scoring_ = null;
        scoringBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.fhir.r4.core.Datatypes.internal_static_google_fhir_r4_core_ProdCharacteristic_descriptor;
    }

    @java.lang.Override
    public com.google.fhir.r4.core.ProdCharacteristic getDefaultInstanceForType() {
      return com.google.fhir.r4.core.ProdCharacteristic.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.fhir.r4.core.ProdCharacteristic build() {
      com.google.fhir.r4.core.ProdCharacteristic result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.fhir.r4.core.ProdCharacteristic buildPartial() {
      com.google.fhir.r4.core.ProdCharacteristic result = new com.google.fhir.r4.core.ProdCharacteristic(this);
      int from_bitField0_ = bitField0_;
      if (idBuilder_ == null) {
        result.id_ = id_;
      } else {
        result.id_ = idBuilder_.build();
      }
      if (extensionBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          extension_ = java.util.Collections.unmodifiableList(extension_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.extension_ = extension_;
      } else {
        result.extension_ = extensionBuilder_.build();
      }
      if (modifierExtensionBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          modifierExtension_ = java.util.Collections.unmodifiableList(modifierExtension_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.modifierExtension_ = modifierExtension_;
      } else {
        result.modifierExtension_ = modifierExtensionBuilder_.build();
      }
      if (heightBuilder_ == null) {
        result.height_ = height_;
      } else {
        result.height_ = heightBuilder_.build();
      }
      if (widthBuilder_ == null) {
        result.width_ = width_;
      } else {
        result.width_ = widthBuilder_.build();
      }
      if (depthBuilder_ == null) {
        result.depth_ = depth_;
      } else {
        result.depth_ = depthBuilder_.build();
      }
      if (weightBuilder_ == null) {
        result.weight_ = weight_;
      } else {
        result.weight_ = weightBuilder_.build();
      }
      if (nominalVolumeBuilder_ == null) {
        result.nominalVolume_ = nominalVolume_;
      } else {
        result.nominalVolume_ = nominalVolumeBuilder_.build();
      }
      if (externalDiameterBuilder_ == null) {
        result.externalDiameter_ = externalDiameter_;
      } else {
        result.externalDiameter_ = externalDiameterBuilder_.build();
      }
      if (shapeBuilder_ == null) {
        result.shape_ = shape_;
      } else {
        result.shape_ = shapeBuilder_.build();
      }
      if (colorBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          color_ = java.util.Collections.unmodifiableList(color_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.color_ = color_;
      } else {
        result.color_ = colorBuilder_.build();
      }
      if (imprintBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          imprint_ = java.util.Collections.unmodifiableList(imprint_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.imprint_ = imprint_;
      } else {
        result.imprint_ = imprintBuilder_.build();
      }
      if (imageBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          image_ = java.util.Collections.unmodifiableList(image_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.image_ = image_;
      } else {
        result.image_ = imageBuilder_.build();
      }
      if (scoringBuilder_ == null) {
        result.scoring_ = scoring_;
      } else {
        result.scoring_ = scoringBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.fhir.r4.core.ProdCharacteristic) {
        return mergeFrom((com.google.fhir.r4.core.ProdCharacteristic)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.fhir.r4.core.ProdCharacteristic other) {
      if (other == com.google.fhir.r4.core.ProdCharacteristic.getDefaultInstance()) return this;
      if (other.hasId()) {
        mergeId(other.getId());
      }
      if (extensionBuilder_ == null) {
        if (!other.extension_.isEmpty()) {
          if (extension_.isEmpty()) {
            extension_ = other.extension_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureExtensionIsMutable();
            extension_.addAll(other.extension_);
          }
          onChanged();
        }
      } else {
        if (!other.extension_.isEmpty()) {
          if (extensionBuilder_.isEmpty()) {
            extensionBuilder_.dispose();
            extensionBuilder_ = null;
            extension_ = other.extension_;
            bitField0_ = (bitField0_ & ~0x00000001);
            extensionBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getExtensionFieldBuilder() : null;
          } else {
            extensionBuilder_.addAllMessages(other.extension_);
          }
        }
      }
      if (modifierExtensionBuilder_ == null) {
        if (!other.modifierExtension_.isEmpty()) {
          if (modifierExtension_.isEmpty()) {
            modifierExtension_ = other.modifierExtension_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureModifierExtensionIsMutable();
            modifierExtension_.addAll(other.modifierExtension_);
          }
          onChanged();
        }
      } else {
        if (!other.modifierExtension_.isEmpty()) {
          if (modifierExtensionBuilder_.isEmpty()) {
            modifierExtensionBuilder_.dispose();
            modifierExtensionBuilder_ = null;
            modifierExtension_ = other.modifierExtension_;
            bitField0_ = (bitField0_ & ~0x00000002);
            modifierExtensionBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getModifierExtensionFieldBuilder() : null;
          } else {
            modifierExtensionBuilder_.addAllMessages(other.modifierExtension_);
          }
        }
      }
      if (other.hasHeight()) {
        mergeHeight(other.getHeight());
      }
      if (other.hasWidth()) {
        mergeWidth(other.getWidth());
      }
      if (other.hasDepth()) {
        mergeDepth(other.getDepth());
      }
      if (other.hasWeight()) {
        mergeWeight(other.getWeight());
      }
      if (other.hasNominalVolume()) {
        mergeNominalVolume(other.getNominalVolume());
      }
      if (other.hasExternalDiameter()) {
        mergeExternalDiameter(other.getExternalDiameter());
      }
      if (other.hasShape()) {
        mergeShape(other.getShape());
      }
      if (colorBuilder_ == null) {
        if (!other.color_.isEmpty()) {
          if (color_.isEmpty()) {
            color_ = other.color_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureColorIsMutable();
            color_.addAll(other.color_);
          }
          onChanged();
        }
      } else {
        if (!other.color_.isEmpty()) {
          if (colorBuilder_.isEmpty()) {
            colorBuilder_.dispose();
            colorBuilder_ = null;
            color_ = other.color_;
            bitField0_ = (bitField0_ & ~0x00000004);
            colorBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getColorFieldBuilder() : null;
          } else {
            colorBuilder_.addAllMessages(other.color_);
          }
        }
      }
      if (imprintBuilder_ == null) {
        if (!other.imprint_.isEmpty()) {
          if (imprint_.isEmpty()) {
            imprint_ = other.imprint_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureImprintIsMutable();
            imprint_.addAll(other.imprint_);
          }
          onChanged();
        }
      } else {
        if (!other.imprint_.isEmpty()) {
          if (imprintBuilder_.isEmpty()) {
            imprintBuilder_.dispose();
            imprintBuilder_ = null;
            imprint_ = other.imprint_;
            bitField0_ = (bitField0_ & ~0x00000008);
            imprintBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getImprintFieldBuilder() : null;
          } else {
            imprintBuilder_.addAllMessages(other.imprint_);
          }
        }
      }
      if (imageBuilder_ == null) {
        if (!other.image_.isEmpty()) {
          if (image_.isEmpty()) {
            image_ = other.image_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureImageIsMutable();
            image_.addAll(other.image_);
          }
          onChanged();
        }
      } else {
        if (!other.image_.isEmpty()) {
          if (imageBuilder_.isEmpty()) {
            imageBuilder_.dispose();
            imageBuilder_ = null;
            image_ = other.image_;
            bitField0_ = (bitField0_ & ~0x00000010);
            imageBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getImageFieldBuilder() : null;
          } else {
            imageBuilder_.addAllMessages(other.image_);
          }
        }
      }
      if (other.hasScoring()) {
        mergeScoring(other.getScoring());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.fhir.r4.core.ProdCharacteristic parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.fhir.r4.core.ProdCharacteristic) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.fhir.r4.core.String id_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.String, com.google.fhir.r4.core.String.Builder, com.google.fhir.r4.core.StringOrBuilder> idBuilder_;
    /**
     * <pre>
     * Unique id for inter-element referencing
     * </pre>
     *
     * <code>.google.fhir.r4.core.String id = 1;</code>
     * @return Whether the id field is set.
     */
    public boolean hasId() {
      return idBuilder_ != null || id_ != null;
    }
    /**
     * <pre>
     * Unique id for inter-element referencing
     * </pre>
     *
     * <code>.google.fhir.r4.core.String id = 1;</code>
     * @return The id.
     */
    public com.google.fhir.r4.core.String getId() {
      if (idBuilder_ == null) {
        return id_ == null ? com.google.fhir.r4.core.String.getDefaultInstance() : id_;
      } else {
        return idBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Unique id for inter-element referencing
     * </pre>
     *
     * <code>.google.fhir.r4.core.String id = 1;</code>
     */
    public Builder setId(com.google.fhir.r4.core.String value) {
      if (idBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        id_ = value;
        onChanged();
      } else {
        idBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Unique id for inter-element referencing
     * </pre>
     *
     * <code>.google.fhir.r4.core.String id = 1;</code>
     */
    public Builder setId(
        com.google.fhir.r4.core.String.Builder builderForValue) {
      if (idBuilder_ == null) {
        id_ = builderForValue.build();
        onChanged();
      } else {
        idBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Unique id for inter-element referencing
     * </pre>
     *
     * <code>.google.fhir.r4.core.String id = 1;</code>
     */
    public Builder mergeId(com.google.fhir.r4.core.String value) {
      if (idBuilder_ == null) {
        if (id_ != null) {
          id_ =
            com.google.fhir.r4.core.String.newBuilder(id_).mergeFrom(value).buildPartial();
        } else {
          id_ = value;
        }
        onChanged();
      } else {
        idBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Unique id for inter-element referencing
     * </pre>
     *
     * <code>.google.fhir.r4.core.String id = 1;</code>
     */
    public Builder clearId() {
      if (idBuilder_ == null) {
        id_ = null;
        onChanged();
      } else {
        id_ = null;
        idBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Unique id for inter-element referencing
     * </pre>
     *
     * <code>.google.fhir.r4.core.String id = 1;</code>
     */
    public com.google.fhir.r4.core.String.Builder getIdBuilder() {
      
      onChanged();
      return getIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Unique id for inter-element referencing
     * </pre>
     *
     * <code>.google.fhir.r4.core.String id = 1;</code>
     */
    public com.google.fhir.r4.core.StringOrBuilder getIdOrBuilder() {
      if (idBuilder_ != null) {
        return idBuilder_.getMessageOrBuilder();
      } else {
        return id_ == null ?
            com.google.fhir.r4.core.String.getDefaultInstance() : id_;
      }
    }
    /**
     * <pre>
     * Unique id for inter-element referencing
     * </pre>
     *
     * <code>.google.fhir.r4.core.String id = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.String, com.google.fhir.r4.core.String.Builder, com.google.fhir.r4.core.StringOrBuilder> 
        getIdFieldBuilder() {
      if (idBuilder_ == null) {
        idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.fhir.r4.core.String, com.google.fhir.r4.core.String.Builder, com.google.fhir.r4.core.StringOrBuilder>(
                getId(),
                getParentForChildren(),
                isClean());
        id_ = null;
      }
      return idBuilder_;
    }

    private java.util.List<com.google.fhir.r4.core.Extension> extension_ =
      java.util.Collections.emptyList();
    private void ensureExtensionIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        extension_ = new java.util.ArrayList<com.google.fhir.r4.core.Extension>(extension_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.fhir.r4.core.Extension, com.google.fhir.r4.core.Extension.Builder, com.google.fhir.r4.core.ExtensionOrBuilder> extensionBuilder_;

    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public java.util.List<com.google.fhir.r4.core.Extension> getExtensionList() {
      if (extensionBuilder_ == null) {
        return java.util.Collections.unmodifiableList(extension_);
      } else {
        return extensionBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public int getExtensionCount() {
      if (extensionBuilder_ == null) {
        return extension_.size();
      } else {
        return extensionBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public com.google.fhir.r4.core.Extension getExtension(int index) {
      if (extensionBuilder_ == null) {
        return extension_.get(index);
      } else {
        return extensionBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public Builder setExtension(
        int index, com.google.fhir.r4.core.Extension value) {
      if (extensionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtensionIsMutable();
        extension_.set(index, value);
        onChanged();
      } else {
        extensionBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public Builder setExtension(
        int index, com.google.fhir.r4.core.Extension.Builder builderForValue) {
      if (extensionBuilder_ == null) {
        ensureExtensionIsMutable();
        extension_.set(index, builderForValue.build());
        onChanged();
      } else {
        extensionBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public Builder addExtension(com.google.fhir.r4.core.Extension value) {
      if (extensionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtensionIsMutable();
        extension_.add(value);
        onChanged();
      } else {
        extensionBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public Builder addExtension(
        int index, com.google.fhir.r4.core.Extension value) {
      if (extensionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExtensionIsMutable();
        extension_.add(index, value);
        onChanged();
      } else {
        extensionBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public Builder addExtension(
        com.google.fhir.r4.core.Extension.Builder builderForValue) {
      if (extensionBuilder_ == null) {
        ensureExtensionIsMutable();
        extension_.add(builderForValue.build());
        onChanged();
      } else {
        extensionBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public Builder addExtension(
        int index, com.google.fhir.r4.core.Extension.Builder builderForValue) {
      if (extensionBuilder_ == null) {
        ensureExtensionIsMutable();
        extension_.add(index, builderForValue.build());
        onChanged();
      } else {
        extensionBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public Builder addAllExtension(
        java.lang.Iterable<? extends com.google.fhir.r4.core.Extension> values) {
      if (extensionBuilder_ == null) {
        ensureExtensionIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, extension_);
        onChanged();
      } else {
        extensionBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public Builder clearExtension() {
      if (extensionBuilder_ == null) {
        extension_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        extensionBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public Builder removeExtension(int index) {
      if (extensionBuilder_ == null) {
        ensureExtensionIsMutable();
        extension_.remove(index);
        onChanged();
      } else {
        extensionBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public com.google.fhir.r4.core.Extension.Builder getExtensionBuilder(
        int index) {
      return getExtensionFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public com.google.fhir.r4.core.ExtensionOrBuilder getExtensionOrBuilder(
        int index) {
      if (extensionBuilder_ == null) {
        return extension_.get(index);  } else {
        return extensionBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public java.util.List<? extends com.google.fhir.r4.core.ExtensionOrBuilder> 
         getExtensionOrBuilderList() {
      if (extensionBuilder_ != null) {
        return extensionBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(extension_);
      }
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public com.google.fhir.r4.core.Extension.Builder addExtensionBuilder() {
      return getExtensionFieldBuilder().addBuilder(
          com.google.fhir.r4.core.Extension.getDefaultInstance());
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public com.google.fhir.r4.core.Extension.Builder addExtensionBuilder(
        int index) {
      return getExtensionFieldBuilder().addBuilder(
          index, com.google.fhir.r4.core.Extension.getDefaultInstance());
    }
    /**
     * <pre>
     * Additional content defined by implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension extension = 2;</code>
     */
    public java.util.List<com.google.fhir.r4.core.Extension.Builder> 
         getExtensionBuilderList() {
      return getExtensionFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.fhir.r4.core.Extension, com.google.fhir.r4.core.Extension.Builder, com.google.fhir.r4.core.ExtensionOrBuilder> 
        getExtensionFieldBuilder() {
      if (extensionBuilder_ == null) {
        extensionBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.fhir.r4.core.Extension, com.google.fhir.r4.core.Extension.Builder, com.google.fhir.r4.core.ExtensionOrBuilder>(
                extension_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        extension_ = null;
      }
      return extensionBuilder_;
    }

    private java.util.List<com.google.fhir.r4.core.Extension> modifierExtension_ =
      java.util.Collections.emptyList();
    private void ensureModifierExtensionIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        modifierExtension_ = new java.util.ArrayList<com.google.fhir.r4.core.Extension>(modifierExtension_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.fhir.r4.core.Extension, com.google.fhir.r4.core.Extension.Builder, com.google.fhir.r4.core.ExtensionOrBuilder> modifierExtensionBuilder_;

    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public java.util.List<com.google.fhir.r4.core.Extension> getModifierExtensionList() {
      if (modifierExtensionBuilder_ == null) {
        return java.util.Collections.unmodifiableList(modifierExtension_);
      } else {
        return modifierExtensionBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public int getModifierExtensionCount() {
      if (modifierExtensionBuilder_ == null) {
        return modifierExtension_.size();
      } else {
        return modifierExtensionBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public com.google.fhir.r4.core.Extension getModifierExtension(int index) {
      if (modifierExtensionBuilder_ == null) {
        return modifierExtension_.get(index);
      } else {
        return modifierExtensionBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public Builder setModifierExtension(
        int index, com.google.fhir.r4.core.Extension value) {
      if (modifierExtensionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModifierExtensionIsMutable();
        modifierExtension_.set(index, value);
        onChanged();
      } else {
        modifierExtensionBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public Builder setModifierExtension(
        int index, com.google.fhir.r4.core.Extension.Builder builderForValue) {
      if (modifierExtensionBuilder_ == null) {
        ensureModifierExtensionIsMutable();
        modifierExtension_.set(index, builderForValue.build());
        onChanged();
      } else {
        modifierExtensionBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public Builder addModifierExtension(com.google.fhir.r4.core.Extension value) {
      if (modifierExtensionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModifierExtensionIsMutable();
        modifierExtension_.add(value);
        onChanged();
      } else {
        modifierExtensionBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public Builder addModifierExtension(
        int index, com.google.fhir.r4.core.Extension value) {
      if (modifierExtensionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModifierExtensionIsMutable();
        modifierExtension_.add(index, value);
        onChanged();
      } else {
        modifierExtensionBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public Builder addModifierExtension(
        com.google.fhir.r4.core.Extension.Builder builderForValue) {
      if (modifierExtensionBuilder_ == null) {
        ensureModifierExtensionIsMutable();
        modifierExtension_.add(builderForValue.build());
        onChanged();
      } else {
        modifierExtensionBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public Builder addModifierExtension(
        int index, com.google.fhir.r4.core.Extension.Builder builderForValue) {
      if (modifierExtensionBuilder_ == null) {
        ensureModifierExtensionIsMutable();
        modifierExtension_.add(index, builderForValue.build());
        onChanged();
      } else {
        modifierExtensionBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public Builder addAllModifierExtension(
        java.lang.Iterable<? extends com.google.fhir.r4.core.Extension> values) {
      if (modifierExtensionBuilder_ == null) {
        ensureModifierExtensionIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, modifierExtension_);
        onChanged();
      } else {
        modifierExtensionBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public Builder clearModifierExtension() {
      if (modifierExtensionBuilder_ == null) {
        modifierExtension_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        modifierExtensionBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public Builder removeModifierExtension(int index) {
      if (modifierExtensionBuilder_ == null) {
        ensureModifierExtensionIsMutable();
        modifierExtension_.remove(index);
        onChanged();
      } else {
        modifierExtensionBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public com.google.fhir.r4.core.Extension.Builder getModifierExtensionBuilder(
        int index) {
      return getModifierExtensionFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public com.google.fhir.r4.core.ExtensionOrBuilder getModifierExtensionOrBuilder(
        int index) {
      if (modifierExtensionBuilder_ == null) {
        return modifierExtension_.get(index);  } else {
        return modifierExtensionBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public java.util.List<? extends com.google.fhir.r4.core.ExtensionOrBuilder> 
         getModifierExtensionOrBuilderList() {
      if (modifierExtensionBuilder_ != null) {
        return modifierExtensionBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(modifierExtension_);
      }
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public com.google.fhir.r4.core.Extension.Builder addModifierExtensionBuilder() {
      return getModifierExtensionFieldBuilder().addBuilder(
          com.google.fhir.r4.core.Extension.getDefaultInstance());
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public com.google.fhir.r4.core.Extension.Builder addModifierExtensionBuilder(
        int index) {
      return getModifierExtensionFieldBuilder().addBuilder(
          index, com.google.fhir.r4.core.Extension.getDefaultInstance());
    }
    /**
     * <pre>
     * Extensions that cannot be ignored even if unrecognized
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 3;</code>
     */
    public java.util.List<com.google.fhir.r4.core.Extension.Builder> 
         getModifierExtensionBuilderList() {
      return getModifierExtensionFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.fhir.r4.core.Extension, com.google.fhir.r4.core.Extension.Builder, com.google.fhir.r4.core.ExtensionOrBuilder> 
        getModifierExtensionFieldBuilder() {
      if (modifierExtensionBuilder_ == null) {
        modifierExtensionBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.fhir.r4.core.Extension, com.google.fhir.r4.core.Extension.Builder, com.google.fhir.r4.core.ExtensionOrBuilder>(
                modifierExtension_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        modifierExtension_ = null;
      }
      return modifierExtensionBuilder_;
    }

    private com.google.fhir.r4.core.Quantity height_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder> heightBuilder_;
    /**
     * <pre>
     * Where applicable, the height can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity height = 4;</code>
     * @return Whether the height field is set.
     */
    public boolean hasHeight() {
      return heightBuilder_ != null || height_ != null;
    }
    /**
     * <pre>
     * Where applicable, the height can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity height = 4;</code>
     * @return The height.
     */
    public com.google.fhir.r4.core.Quantity getHeight() {
      if (heightBuilder_ == null) {
        return height_ == null ? com.google.fhir.r4.core.Quantity.getDefaultInstance() : height_;
      } else {
        return heightBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Where applicable, the height can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity height = 4;</code>
     */
    public Builder setHeight(com.google.fhir.r4.core.Quantity value) {
      if (heightBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        height_ = value;
        onChanged();
      } else {
        heightBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the height can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity height = 4;</code>
     */
    public Builder setHeight(
        com.google.fhir.r4.core.Quantity.Builder builderForValue) {
      if (heightBuilder_ == null) {
        height_ = builderForValue.build();
        onChanged();
      } else {
        heightBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the height can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity height = 4;</code>
     */
    public Builder mergeHeight(com.google.fhir.r4.core.Quantity value) {
      if (heightBuilder_ == null) {
        if (height_ != null) {
          height_ =
            com.google.fhir.r4.core.Quantity.newBuilder(height_).mergeFrom(value).buildPartial();
        } else {
          height_ = value;
        }
        onChanged();
      } else {
        heightBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the height can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity height = 4;</code>
     */
    public Builder clearHeight() {
      if (heightBuilder_ == null) {
        height_ = null;
        onChanged();
      } else {
        height_ = null;
        heightBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the height can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity height = 4;</code>
     */
    public com.google.fhir.r4.core.Quantity.Builder getHeightBuilder() {
      
      onChanged();
      return getHeightFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Where applicable, the height can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity height = 4;</code>
     */
    public com.google.fhir.r4.core.QuantityOrBuilder getHeightOrBuilder() {
      if (heightBuilder_ != null) {
        return heightBuilder_.getMessageOrBuilder();
      } else {
        return height_ == null ?
            com.google.fhir.r4.core.Quantity.getDefaultInstance() : height_;
      }
    }
    /**
     * <pre>
     * Where applicable, the height can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity height = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder> 
        getHeightFieldBuilder() {
      if (heightBuilder_ == null) {
        heightBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder>(
                getHeight(),
                getParentForChildren(),
                isClean());
        height_ = null;
      }
      return heightBuilder_;
    }

    private com.google.fhir.r4.core.Quantity width_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder> widthBuilder_;
    /**
     * <pre>
     * Where applicable, the width can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity width = 5;</code>
     * @return Whether the width field is set.
     */
    public boolean hasWidth() {
      return widthBuilder_ != null || width_ != null;
    }
    /**
     * <pre>
     * Where applicable, the width can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity width = 5;</code>
     * @return The width.
     */
    public com.google.fhir.r4.core.Quantity getWidth() {
      if (widthBuilder_ == null) {
        return width_ == null ? com.google.fhir.r4.core.Quantity.getDefaultInstance() : width_;
      } else {
        return widthBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Where applicable, the width can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity width = 5;</code>
     */
    public Builder setWidth(com.google.fhir.r4.core.Quantity value) {
      if (widthBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        width_ = value;
        onChanged();
      } else {
        widthBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the width can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity width = 5;</code>
     */
    public Builder setWidth(
        com.google.fhir.r4.core.Quantity.Builder builderForValue) {
      if (widthBuilder_ == null) {
        width_ = builderForValue.build();
        onChanged();
      } else {
        widthBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the width can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity width = 5;</code>
     */
    public Builder mergeWidth(com.google.fhir.r4.core.Quantity value) {
      if (widthBuilder_ == null) {
        if (width_ != null) {
          width_ =
            com.google.fhir.r4.core.Quantity.newBuilder(width_).mergeFrom(value).buildPartial();
        } else {
          width_ = value;
        }
        onChanged();
      } else {
        widthBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the width can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity width = 5;</code>
     */
    public Builder clearWidth() {
      if (widthBuilder_ == null) {
        width_ = null;
        onChanged();
      } else {
        width_ = null;
        widthBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the width can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity width = 5;</code>
     */
    public com.google.fhir.r4.core.Quantity.Builder getWidthBuilder() {
      
      onChanged();
      return getWidthFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Where applicable, the width can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity width = 5;</code>
     */
    public com.google.fhir.r4.core.QuantityOrBuilder getWidthOrBuilder() {
      if (widthBuilder_ != null) {
        return widthBuilder_.getMessageOrBuilder();
      } else {
        return width_ == null ?
            com.google.fhir.r4.core.Quantity.getDefaultInstance() : width_;
      }
    }
    /**
     * <pre>
     * Where applicable, the width can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity width = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder> 
        getWidthFieldBuilder() {
      if (widthBuilder_ == null) {
        widthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder>(
                getWidth(),
                getParentForChildren(),
                isClean());
        width_ = null;
      }
      return widthBuilder_;
    }

    private com.google.fhir.r4.core.Quantity depth_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder> depthBuilder_;
    /**
     * <pre>
     * Where applicable, the depth can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity depth = 6;</code>
     * @return Whether the depth field is set.
     */
    public boolean hasDepth() {
      return depthBuilder_ != null || depth_ != null;
    }
    /**
     * <pre>
     * Where applicable, the depth can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity depth = 6;</code>
     * @return The depth.
     */
    public com.google.fhir.r4.core.Quantity getDepth() {
      if (depthBuilder_ == null) {
        return depth_ == null ? com.google.fhir.r4.core.Quantity.getDefaultInstance() : depth_;
      } else {
        return depthBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Where applicable, the depth can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity depth = 6;</code>
     */
    public Builder setDepth(com.google.fhir.r4.core.Quantity value) {
      if (depthBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        depth_ = value;
        onChanged();
      } else {
        depthBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the depth can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity depth = 6;</code>
     */
    public Builder setDepth(
        com.google.fhir.r4.core.Quantity.Builder builderForValue) {
      if (depthBuilder_ == null) {
        depth_ = builderForValue.build();
        onChanged();
      } else {
        depthBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the depth can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity depth = 6;</code>
     */
    public Builder mergeDepth(com.google.fhir.r4.core.Quantity value) {
      if (depthBuilder_ == null) {
        if (depth_ != null) {
          depth_ =
            com.google.fhir.r4.core.Quantity.newBuilder(depth_).mergeFrom(value).buildPartial();
        } else {
          depth_ = value;
        }
        onChanged();
      } else {
        depthBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the depth can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity depth = 6;</code>
     */
    public Builder clearDepth() {
      if (depthBuilder_ == null) {
        depth_ = null;
        onChanged();
      } else {
        depth_ = null;
        depthBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the depth can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity depth = 6;</code>
     */
    public com.google.fhir.r4.core.Quantity.Builder getDepthBuilder() {
      
      onChanged();
      return getDepthFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Where applicable, the depth can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity depth = 6;</code>
     */
    public com.google.fhir.r4.core.QuantityOrBuilder getDepthOrBuilder() {
      if (depthBuilder_ != null) {
        return depthBuilder_.getMessageOrBuilder();
      } else {
        return depth_ == null ?
            com.google.fhir.r4.core.Quantity.getDefaultInstance() : depth_;
      }
    }
    /**
     * <pre>
     * Where applicable, the depth can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity depth = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder> 
        getDepthFieldBuilder() {
      if (depthBuilder_ == null) {
        depthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder>(
                getDepth(),
                getParentForChildren(),
                isClean());
        depth_ = null;
      }
      return depthBuilder_;
    }

    private com.google.fhir.r4.core.Quantity weight_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder> weightBuilder_;
    /**
     * <pre>
     * Where applicable, the weight can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity weight = 7;</code>
     * @return Whether the weight field is set.
     */
    public boolean hasWeight() {
      return weightBuilder_ != null || weight_ != null;
    }
    /**
     * <pre>
     * Where applicable, the weight can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity weight = 7;</code>
     * @return The weight.
     */
    public com.google.fhir.r4.core.Quantity getWeight() {
      if (weightBuilder_ == null) {
        return weight_ == null ? com.google.fhir.r4.core.Quantity.getDefaultInstance() : weight_;
      } else {
        return weightBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Where applicable, the weight can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity weight = 7;</code>
     */
    public Builder setWeight(com.google.fhir.r4.core.Quantity value) {
      if (weightBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        weight_ = value;
        onChanged();
      } else {
        weightBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the weight can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity weight = 7;</code>
     */
    public Builder setWeight(
        com.google.fhir.r4.core.Quantity.Builder builderForValue) {
      if (weightBuilder_ == null) {
        weight_ = builderForValue.build();
        onChanged();
      } else {
        weightBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the weight can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity weight = 7;</code>
     */
    public Builder mergeWeight(com.google.fhir.r4.core.Quantity value) {
      if (weightBuilder_ == null) {
        if (weight_ != null) {
          weight_ =
            com.google.fhir.r4.core.Quantity.newBuilder(weight_).mergeFrom(value).buildPartial();
        } else {
          weight_ = value;
        }
        onChanged();
      } else {
        weightBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the weight can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity weight = 7;</code>
     */
    public Builder clearWeight() {
      if (weightBuilder_ == null) {
        weight_ = null;
        onChanged();
      } else {
        weight_ = null;
        weightBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the weight can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity weight = 7;</code>
     */
    public com.google.fhir.r4.core.Quantity.Builder getWeightBuilder() {
      
      onChanged();
      return getWeightFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Where applicable, the weight can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity weight = 7;</code>
     */
    public com.google.fhir.r4.core.QuantityOrBuilder getWeightOrBuilder() {
      if (weightBuilder_ != null) {
        return weightBuilder_.getMessageOrBuilder();
      } else {
        return weight_ == null ?
            com.google.fhir.r4.core.Quantity.getDefaultInstance() : weight_;
      }
    }
    /**
     * <pre>
     * Where applicable, the weight can be specified using a numerical value and
     * its unit of measurement The unit of measurement shall be specified in
     * accordance with ISO 11240 and the resulting terminology The symbol and the
     * symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity weight = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder> 
        getWeightFieldBuilder() {
      if (weightBuilder_ == null) {
        weightBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder>(
                getWeight(),
                getParentForChildren(),
                isClean());
        weight_ = null;
      }
      return weightBuilder_;
    }

    private com.google.fhir.r4.core.Quantity nominalVolume_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder> nominalVolumeBuilder_;
    /**
     * <pre>
     * Where applicable, the nominal volume can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity nominal_volume = 8;</code>
     * @return Whether the nominalVolume field is set.
     */
    public boolean hasNominalVolume() {
      return nominalVolumeBuilder_ != null || nominalVolume_ != null;
    }
    /**
     * <pre>
     * Where applicable, the nominal volume can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity nominal_volume = 8;</code>
     * @return The nominalVolume.
     */
    public com.google.fhir.r4.core.Quantity getNominalVolume() {
      if (nominalVolumeBuilder_ == null) {
        return nominalVolume_ == null ? com.google.fhir.r4.core.Quantity.getDefaultInstance() : nominalVolume_;
      } else {
        return nominalVolumeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Where applicable, the nominal volume can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity nominal_volume = 8;</code>
     */
    public Builder setNominalVolume(com.google.fhir.r4.core.Quantity value) {
      if (nominalVolumeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        nominalVolume_ = value;
        onChanged();
      } else {
        nominalVolumeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the nominal volume can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity nominal_volume = 8;</code>
     */
    public Builder setNominalVolume(
        com.google.fhir.r4.core.Quantity.Builder builderForValue) {
      if (nominalVolumeBuilder_ == null) {
        nominalVolume_ = builderForValue.build();
        onChanged();
      } else {
        nominalVolumeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the nominal volume can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity nominal_volume = 8;</code>
     */
    public Builder mergeNominalVolume(com.google.fhir.r4.core.Quantity value) {
      if (nominalVolumeBuilder_ == null) {
        if (nominalVolume_ != null) {
          nominalVolume_ =
            com.google.fhir.r4.core.Quantity.newBuilder(nominalVolume_).mergeFrom(value).buildPartial();
        } else {
          nominalVolume_ = value;
        }
        onChanged();
      } else {
        nominalVolumeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the nominal volume can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity nominal_volume = 8;</code>
     */
    public Builder clearNominalVolume() {
      if (nominalVolumeBuilder_ == null) {
        nominalVolume_ = null;
        onChanged();
      } else {
        nominalVolume_ = null;
        nominalVolumeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the nominal volume can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity nominal_volume = 8;</code>
     */
    public com.google.fhir.r4.core.Quantity.Builder getNominalVolumeBuilder() {
      
      onChanged();
      return getNominalVolumeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Where applicable, the nominal volume can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity nominal_volume = 8;</code>
     */
    public com.google.fhir.r4.core.QuantityOrBuilder getNominalVolumeOrBuilder() {
      if (nominalVolumeBuilder_ != null) {
        return nominalVolumeBuilder_.getMessageOrBuilder();
      } else {
        return nominalVolume_ == null ?
            com.google.fhir.r4.core.Quantity.getDefaultInstance() : nominalVolume_;
      }
    }
    /**
     * <pre>
     * Where applicable, the nominal volume can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity nominal_volume = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder> 
        getNominalVolumeFieldBuilder() {
      if (nominalVolumeBuilder_ == null) {
        nominalVolumeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder>(
                getNominalVolume(),
                getParentForChildren(),
                isClean());
        nominalVolume_ = null;
      }
      return nominalVolumeBuilder_;
    }

    private com.google.fhir.r4.core.Quantity externalDiameter_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder> externalDiameterBuilder_;
    /**
     * <pre>
     * Where applicable, the external diameter can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity external_diameter = 9;</code>
     * @return Whether the externalDiameter field is set.
     */
    public boolean hasExternalDiameter() {
      return externalDiameterBuilder_ != null || externalDiameter_ != null;
    }
    /**
     * <pre>
     * Where applicable, the external diameter can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity external_diameter = 9;</code>
     * @return The externalDiameter.
     */
    public com.google.fhir.r4.core.Quantity getExternalDiameter() {
      if (externalDiameterBuilder_ == null) {
        return externalDiameter_ == null ? com.google.fhir.r4.core.Quantity.getDefaultInstance() : externalDiameter_;
      } else {
        return externalDiameterBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Where applicable, the external diameter can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity external_diameter = 9;</code>
     */
    public Builder setExternalDiameter(com.google.fhir.r4.core.Quantity value) {
      if (externalDiameterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        externalDiameter_ = value;
        onChanged();
      } else {
        externalDiameterBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the external diameter can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity external_diameter = 9;</code>
     */
    public Builder setExternalDiameter(
        com.google.fhir.r4.core.Quantity.Builder builderForValue) {
      if (externalDiameterBuilder_ == null) {
        externalDiameter_ = builderForValue.build();
        onChanged();
      } else {
        externalDiameterBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the external diameter can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity external_diameter = 9;</code>
     */
    public Builder mergeExternalDiameter(com.google.fhir.r4.core.Quantity value) {
      if (externalDiameterBuilder_ == null) {
        if (externalDiameter_ != null) {
          externalDiameter_ =
            com.google.fhir.r4.core.Quantity.newBuilder(externalDiameter_).mergeFrom(value).buildPartial();
        } else {
          externalDiameter_ = value;
        }
        onChanged();
      } else {
        externalDiameterBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the external diameter can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity external_diameter = 9;</code>
     */
    public Builder clearExternalDiameter() {
      if (externalDiameterBuilder_ == null) {
        externalDiameter_ = null;
        onChanged();
      } else {
        externalDiameter_ = null;
        externalDiameterBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the external diameter can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity external_diameter = 9;</code>
     */
    public com.google.fhir.r4.core.Quantity.Builder getExternalDiameterBuilder() {
      
      onChanged();
      return getExternalDiameterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Where applicable, the external diameter can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity external_diameter = 9;</code>
     */
    public com.google.fhir.r4.core.QuantityOrBuilder getExternalDiameterOrBuilder() {
      if (externalDiameterBuilder_ != null) {
        return externalDiameterBuilder_.getMessageOrBuilder();
      } else {
        return externalDiameter_ == null ?
            com.google.fhir.r4.core.Quantity.getDefaultInstance() : externalDiameter_;
      }
    }
    /**
     * <pre>
     * Where applicable, the external diameter can be specified using a numerical
     * value and its unit of measurement The unit of measurement shall be
     * specified in accordance with ISO 11240 and the resulting terminology The
     * symbol and the symbol identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.Quantity external_diameter = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder> 
        getExternalDiameterFieldBuilder() {
      if (externalDiameterBuilder_ == null) {
        externalDiameterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.fhir.r4.core.Quantity, com.google.fhir.r4.core.Quantity.Builder, com.google.fhir.r4.core.QuantityOrBuilder>(
                getExternalDiameter(),
                getParentForChildren(),
                isClean());
        externalDiameter_ = null;
      }
      return externalDiameterBuilder_;
    }

    private com.google.fhir.r4.core.String shape_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.String, com.google.fhir.r4.core.String.Builder, com.google.fhir.r4.core.StringOrBuilder> shapeBuilder_;
    /**
     * <pre>
     * Where applicable, the shape can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.String shape = 10;</code>
     * @return Whether the shape field is set.
     */
    public boolean hasShape() {
      return shapeBuilder_ != null || shape_ != null;
    }
    /**
     * <pre>
     * Where applicable, the shape can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.String shape = 10;</code>
     * @return The shape.
     */
    public com.google.fhir.r4.core.String getShape() {
      if (shapeBuilder_ == null) {
        return shape_ == null ? com.google.fhir.r4.core.String.getDefaultInstance() : shape_;
      } else {
        return shapeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Where applicable, the shape can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.String shape = 10;</code>
     */
    public Builder setShape(com.google.fhir.r4.core.String value) {
      if (shapeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        shape_ = value;
        onChanged();
      } else {
        shapeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the shape can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.String shape = 10;</code>
     */
    public Builder setShape(
        com.google.fhir.r4.core.String.Builder builderForValue) {
      if (shapeBuilder_ == null) {
        shape_ = builderForValue.build();
        onChanged();
      } else {
        shapeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the shape can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.String shape = 10;</code>
     */
    public Builder mergeShape(com.google.fhir.r4.core.String value) {
      if (shapeBuilder_ == null) {
        if (shape_ != null) {
          shape_ =
            com.google.fhir.r4.core.String.newBuilder(shape_).mergeFrom(value).buildPartial();
        } else {
          shape_ = value;
        }
        onChanged();
      } else {
        shapeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the shape can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.String shape = 10;</code>
     */
    public Builder clearShape() {
      if (shapeBuilder_ == null) {
        shape_ = null;
        onChanged();
      } else {
        shape_ = null;
        shapeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the shape can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.String shape = 10;</code>
     */
    public com.google.fhir.r4.core.String.Builder getShapeBuilder() {
      
      onChanged();
      return getShapeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Where applicable, the shape can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.String shape = 10;</code>
     */
    public com.google.fhir.r4.core.StringOrBuilder getShapeOrBuilder() {
      if (shapeBuilder_ != null) {
        return shapeBuilder_.getMessageOrBuilder();
      } else {
        return shape_ == null ?
            com.google.fhir.r4.core.String.getDefaultInstance() : shape_;
      }
    }
    /**
     * <pre>
     * Where applicable, the shape can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.String shape = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.String, com.google.fhir.r4.core.String.Builder, com.google.fhir.r4.core.StringOrBuilder> 
        getShapeFieldBuilder() {
      if (shapeBuilder_ == null) {
        shapeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.fhir.r4.core.String, com.google.fhir.r4.core.String.Builder, com.google.fhir.r4.core.StringOrBuilder>(
                getShape(),
                getParentForChildren(),
                isClean());
        shape_ = null;
      }
      return shapeBuilder_;
    }

    private java.util.List<com.google.fhir.r4.core.String> color_ =
      java.util.Collections.emptyList();
    private void ensureColorIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        color_ = new java.util.ArrayList<com.google.fhir.r4.core.String>(color_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.fhir.r4.core.String, com.google.fhir.r4.core.String.Builder, com.google.fhir.r4.core.StringOrBuilder> colorBuilder_;

    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public java.util.List<com.google.fhir.r4.core.String> getColorList() {
      if (colorBuilder_ == null) {
        return java.util.Collections.unmodifiableList(color_);
      } else {
        return colorBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public int getColorCount() {
      if (colorBuilder_ == null) {
        return color_.size();
      } else {
        return colorBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public com.google.fhir.r4.core.String getColor(int index) {
      if (colorBuilder_ == null) {
        return color_.get(index);
      } else {
        return colorBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public Builder setColor(
        int index, com.google.fhir.r4.core.String value) {
      if (colorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureColorIsMutable();
        color_.set(index, value);
        onChanged();
      } else {
        colorBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public Builder setColor(
        int index, com.google.fhir.r4.core.String.Builder builderForValue) {
      if (colorBuilder_ == null) {
        ensureColorIsMutable();
        color_.set(index, builderForValue.build());
        onChanged();
      } else {
        colorBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public Builder addColor(com.google.fhir.r4.core.String value) {
      if (colorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureColorIsMutable();
        color_.add(value);
        onChanged();
      } else {
        colorBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public Builder addColor(
        int index, com.google.fhir.r4.core.String value) {
      if (colorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureColorIsMutable();
        color_.add(index, value);
        onChanged();
      } else {
        colorBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public Builder addColor(
        com.google.fhir.r4.core.String.Builder builderForValue) {
      if (colorBuilder_ == null) {
        ensureColorIsMutable();
        color_.add(builderForValue.build());
        onChanged();
      } else {
        colorBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public Builder addColor(
        int index, com.google.fhir.r4.core.String.Builder builderForValue) {
      if (colorBuilder_ == null) {
        ensureColorIsMutable();
        color_.add(index, builderForValue.build());
        onChanged();
      } else {
        colorBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public Builder addAllColor(
        java.lang.Iterable<? extends com.google.fhir.r4.core.String> values) {
      if (colorBuilder_ == null) {
        ensureColorIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, color_);
        onChanged();
      } else {
        colorBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public Builder clearColor() {
      if (colorBuilder_ == null) {
        color_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        colorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public Builder removeColor(int index) {
      if (colorBuilder_ == null) {
        ensureColorIsMutable();
        color_.remove(index);
        onChanged();
      } else {
        colorBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public com.google.fhir.r4.core.String.Builder getColorBuilder(
        int index) {
      return getColorFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public com.google.fhir.r4.core.StringOrBuilder getColorOrBuilder(
        int index) {
      if (colorBuilder_ == null) {
        return color_.get(index);  } else {
        return colorBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public java.util.List<? extends com.google.fhir.r4.core.StringOrBuilder> 
         getColorOrBuilderList() {
      if (colorBuilder_ != null) {
        return colorBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(color_);
      }
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public com.google.fhir.r4.core.String.Builder addColorBuilder() {
      return getColorFieldBuilder().addBuilder(
          com.google.fhir.r4.core.String.getDefaultInstance());
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public com.google.fhir.r4.core.String.Builder addColorBuilder(
        int index) {
      return getColorFieldBuilder().addBuilder(
          index, com.google.fhir.r4.core.String.getDefaultInstance());
    }
    /**
     * <pre>
     * Where applicable, the color can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String color = 11;</code>
     */
    public java.util.List<com.google.fhir.r4.core.String.Builder> 
         getColorBuilderList() {
      return getColorFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.fhir.r4.core.String, com.google.fhir.r4.core.String.Builder, com.google.fhir.r4.core.StringOrBuilder> 
        getColorFieldBuilder() {
      if (colorBuilder_ == null) {
        colorBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.fhir.r4.core.String, com.google.fhir.r4.core.String.Builder, com.google.fhir.r4.core.StringOrBuilder>(
                color_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        color_ = null;
      }
      return colorBuilder_;
    }

    private java.util.List<com.google.fhir.r4.core.String> imprint_ =
      java.util.Collections.emptyList();
    private void ensureImprintIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        imprint_ = new java.util.ArrayList<com.google.fhir.r4.core.String>(imprint_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.fhir.r4.core.String, com.google.fhir.r4.core.String.Builder, com.google.fhir.r4.core.StringOrBuilder> imprintBuilder_;

    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public java.util.List<com.google.fhir.r4.core.String> getImprintList() {
      if (imprintBuilder_ == null) {
        return java.util.Collections.unmodifiableList(imprint_);
      } else {
        return imprintBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public int getImprintCount() {
      if (imprintBuilder_ == null) {
        return imprint_.size();
      } else {
        return imprintBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public com.google.fhir.r4.core.String getImprint(int index) {
      if (imprintBuilder_ == null) {
        return imprint_.get(index);
      } else {
        return imprintBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public Builder setImprint(
        int index, com.google.fhir.r4.core.String value) {
      if (imprintBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureImprintIsMutable();
        imprint_.set(index, value);
        onChanged();
      } else {
        imprintBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public Builder setImprint(
        int index, com.google.fhir.r4.core.String.Builder builderForValue) {
      if (imprintBuilder_ == null) {
        ensureImprintIsMutable();
        imprint_.set(index, builderForValue.build());
        onChanged();
      } else {
        imprintBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public Builder addImprint(com.google.fhir.r4.core.String value) {
      if (imprintBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureImprintIsMutable();
        imprint_.add(value);
        onChanged();
      } else {
        imprintBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public Builder addImprint(
        int index, com.google.fhir.r4.core.String value) {
      if (imprintBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureImprintIsMutable();
        imprint_.add(index, value);
        onChanged();
      } else {
        imprintBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public Builder addImprint(
        com.google.fhir.r4.core.String.Builder builderForValue) {
      if (imprintBuilder_ == null) {
        ensureImprintIsMutable();
        imprint_.add(builderForValue.build());
        onChanged();
      } else {
        imprintBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public Builder addImprint(
        int index, com.google.fhir.r4.core.String.Builder builderForValue) {
      if (imprintBuilder_ == null) {
        ensureImprintIsMutable();
        imprint_.add(index, builderForValue.build());
        onChanged();
      } else {
        imprintBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public Builder addAllImprint(
        java.lang.Iterable<? extends com.google.fhir.r4.core.String> values) {
      if (imprintBuilder_ == null) {
        ensureImprintIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, imprint_);
        onChanged();
      } else {
        imprintBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public Builder clearImprint() {
      if (imprintBuilder_ == null) {
        imprint_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        imprintBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public Builder removeImprint(int index) {
      if (imprintBuilder_ == null) {
        ensureImprintIsMutable();
        imprint_.remove(index);
        onChanged();
      } else {
        imprintBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public com.google.fhir.r4.core.String.Builder getImprintBuilder(
        int index) {
      return getImprintFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public com.google.fhir.r4.core.StringOrBuilder getImprintOrBuilder(
        int index) {
      if (imprintBuilder_ == null) {
        return imprint_.get(index);  } else {
        return imprintBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public java.util.List<? extends com.google.fhir.r4.core.StringOrBuilder> 
         getImprintOrBuilderList() {
      if (imprintBuilder_ != null) {
        return imprintBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(imprint_);
      }
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public com.google.fhir.r4.core.String.Builder addImprintBuilder() {
      return getImprintFieldBuilder().addBuilder(
          com.google.fhir.r4.core.String.getDefaultInstance());
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public com.google.fhir.r4.core.String.Builder addImprintBuilder(
        int index) {
      return getImprintFieldBuilder().addBuilder(
          index, com.google.fhir.r4.core.String.getDefaultInstance());
    }
    /**
     * <pre>
     * Where applicable, the imprint can be specified as text
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.String imprint = 12;</code>
     */
    public java.util.List<com.google.fhir.r4.core.String.Builder> 
         getImprintBuilderList() {
      return getImprintFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.fhir.r4.core.String, com.google.fhir.r4.core.String.Builder, com.google.fhir.r4.core.StringOrBuilder> 
        getImprintFieldBuilder() {
      if (imprintBuilder_ == null) {
        imprintBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.fhir.r4.core.String, com.google.fhir.r4.core.String.Builder, com.google.fhir.r4.core.StringOrBuilder>(
                imprint_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        imprint_ = null;
      }
      return imprintBuilder_;
    }

    private java.util.List<com.google.fhir.r4.core.Attachment> image_ =
      java.util.Collections.emptyList();
    private void ensureImageIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        image_ = new java.util.ArrayList<com.google.fhir.r4.core.Attachment>(image_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.fhir.r4.core.Attachment, com.google.fhir.r4.core.Attachment.Builder, com.google.fhir.r4.core.AttachmentOrBuilder> imageBuilder_;

    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public java.util.List<com.google.fhir.r4.core.Attachment> getImageList() {
      if (imageBuilder_ == null) {
        return java.util.Collections.unmodifiableList(image_);
      } else {
        return imageBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public int getImageCount() {
      if (imageBuilder_ == null) {
        return image_.size();
      } else {
        return imageBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public com.google.fhir.r4.core.Attachment getImage(int index) {
      if (imageBuilder_ == null) {
        return image_.get(index);
      } else {
        return imageBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public Builder setImage(
        int index, com.google.fhir.r4.core.Attachment value) {
      if (imageBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureImageIsMutable();
        image_.set(index, value);
        onChanged();
      } else {
        imageBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public Builder setImage(
        int index, com.google.fhir.r4.core.Attachment.Builder builderForValue) {
      if (imageBuilder_ == null) {
        ensureImageIsMutable();
        image_.set(index, builderForValue.build());
        onChanged();
      } else {
        imageBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public Builder addImage(com.google.fhir.r4.core.Attachment value) {
      if (imageBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureImageIsMutable();
        image_.add(value);
        onChanged();
      } else {
        imageBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public Builder addImage(
        int index, com.google.fhir.r4.core.Attachment value) {
      if (imageBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureImageIsMutable();
        image_.add(index, value);
        onChanged();
      } else {
        imageBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public Builder addImage(
        com.google.fhir.r4.core.Attachment.Builder builderForValue) {
      if (imageBuilder_ == null) {
        ensureImageIsMutable();
        image_.add(builderForValue.build());
        onChanged();
      } else {
        imageBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public Builder addImage(
        int index, com.google.fhir.r4.core.Attachment.Builder builderForValue) {
      if (imageBuilder_ == null) {
        ensureImageIsMutable();
        image_.add(index, builderForValue.build());
        onChanged();
      } else {
        imageBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public Builder addAllImage(
        java.lang.Iterable<? extends com.google.fhir.r4.core.Attachment> values) {
      if (imageBuilder_ == null) {
        ensureImageIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, image_);
        onChanged();
      } else {
        imageBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public Builder clearImage() {
      if (imageBuilder_ == null) {
        image_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        imageBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public Builder removeImage(int index) {
      if (imageBuilder_ == null) {
        ensureImageIsMutable();
        image_.remove(index);
        onChanged();
      } else {
        imageBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public com.google.fhir.r4.core.Attachment.Builder getImageBuilder(
        int index) {
      return getImageFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public com.google.fhir.r4.core.AttachmentOrBuilder getImageOrBuilder(
        int index) {
      if (imageBuilder_ == null) {
        return image_.get(index);  } else {
        return imageBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public java.util.List<? extends com.google.fhir.r4.core.AttachmentOrBuilder> 
         getImageOrBuilderList() {
      if (imageBuilder_ != null) {
        return imageBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(image_);
      }
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public com.google.fhir.r4.core.Attachment.Builder addImageBuilder() {
      return getImageFieldBuilder().addBuilder(
          com.google.fhir.r4.core.Attachment.getDefaultInstance());
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public com.google.fhir.r4.core.Attachment.Builder addImageBuilder(
        int index) {
      return getImageFieldBuilder().addBuilder(
          index, com.google.fhir.r4.core.Attachment.getDefaultInstance());
    }
    /**
     * <pre>
     * Where applicable, the image can be provided The format of the image
     * attachment shall be specified by regional implementations
     * </pre>
     *
     * <code>repeated .google.fhir.r4.core.Attachment image = 13;</code>
     */
    public java.util.List<com.google.fhir.r4.core.Attachment.Builder> 
         getImageBuilderList() {
      return getImageFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.fhir.r4.core.Attachment, com.google.fhir.r4.core.Attachment.Builder, com.google.fhir.r4.core.AttachmentOrBuilder> 
        getImageFieldBuilder() {
      if (imageBuilder_ == null) {
        imageBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.fhir.r4.core.Attachment, com.google.fhir.r4.core.Attachment.Builder, com.google.fhir.r4.core.AttachmentOrBuilder>(
                image_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        image_ = null;
      }
      return imageBuilder_;
    }

    private com.google.fhir.r4.core.CodeableConcept scoring_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.CodeableConcept, com.google.fhir.r4.core.CodeableConcept.Builder, com.google.fhir.r4.core.CodeableConceptOrBuilder> scoringBuilder_;
    /**
     * <pre>
     * Where applicable, the scoring can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.CodeableConcept scoring = 14;</code>
     * @return Whether the scoring field is set.
     */
    public boolean hasScoring() {
      return scoringBuilder_ != null || scoring_ != null;
    }
    /**
     * <pre>
     * Where applicable, the scoring can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.CodeableConcept scoring = 14;</code>
     * @return The scoring.
     */
    public com.google.fhir.r4.core.CodeableConcept getScoring() {
      if (scoringBuilder_ == null) {
        return scoring_ == null ? com.google.fhir.r4.core.CodeableConcept.getDefaultInstance() : scoring_;
      } else {
        return scoringBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Where applicable, the scoring can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.CodeableConcept scoring = 14;</code>
     */
    public Builder setScoring(com.google.fhir.r4.core.CodeableConcept value) {
      if (scoringBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        scoring_ = value;
        onChanged();
      } else {
        scoringBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the scoring can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.CodeableConcept scoring = 14;</code>
     */
    public Builder setScoring(
        com.google.fhir.r4.core.CodeableConcept.Builder builderForValue) {
      if (scoringBuilder_ == null) {
        scoring_ = builderForValue.build();
        onChanged();
      } else {
        scoringBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the scoring can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.CodeableConcept scoring = 14;</code>
     */
    public Builder mergeScoring(com.google.fhir.r4.core.CodeableConcept value) {
      if (scoringBuilder_ == null) {
        if (scoring_ != null) {
          scoring_ =
            com.google.fhir.r4.core.CodeableConcept.newBuilder(scoring_).mergeFrom(value).buildPartial();
        } else {
          scoring_ = value;
        }
        onChanged();
      } else {
        scoringBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the scoring can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.CodeableConcept scoring = 14;</code>
     */
    public Builder clearScoring() {
      if (scoringBuilder_ == null) {
        scoring_ = null;
        onChanged();
      } else {
        scoring_ = null;
        scoringBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Where applicable, the scoring can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.CodeableConcept scoring = 14;</code>
     */
    public com.google.fhir.r4.core.CodeableConcept.Builder getScoringBuilder() {
      
      onChanged();
      return getScoringFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Where applicable, the scoring can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.CodeableConcept scoring = 14;</code>
     */
    public com.google.fhir.r4.core.CodeableConceptOrBuilder getScoringOrBuilder() {
      if (scoringBuilder_ != null) {
        return scoringBuilder_.getMessageOrBuilder();
      } else {
        return scoring_ == null ?
            com.google.fhir.r4.core.CodeableConcept.getDefaultInstance() : scoring_;
      }
    }
    /**
     * <pre>
     * Where applicable, the scoring can be specified An appropriate controlled
     * vocabulary shall be used The term and the term identifier shall be used
     * </pre>
     *
     * <code>.google.fhir.r4.core.CodeableConcept scoring = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.fhir.r4.core.CodeableConcept, com.google.fhir.r4.core.CodeableConcept.Builder, com.google.fhir.r4.core.CodeableConceptOrBuilder> 
        getScoringFieldBuilder() {
      if (scoringBuilder_ == null) {
        scoringBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.fhir.r4.core.CodeableConcept, com.google.fhir.r4.core.CodeableConcept.Builder, com.google.fhir.r4.core.CodeableConceptOrBuilder>(
                getScoring(),
                getParentForChildren(),
                isClean());
        scoring_ = null;
      }
      return scoringBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.fhir.r4.core.ProdCharacteristic)
  }

  // @@protoc_insertion_point(class_scope:google.fhir.r4.core.ProdCharacteristic)
  private static final com.google.fhir.r4.core.ProdCharacteristic DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.fhir.r4.core.ProdCharacteristic();
  }

  public static com.google.fhir.r4.core.ProdCharacteristic getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ProdCharacteristic>
      PARSER = new com.google.protobuf.AbstractParser<ProdCharacteristic>() {
    @java.lang.Override
    public ProdCharacteristic parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ProdCharacteristic(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ProdCharacteristic> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ProdCharacteristic> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.fhir.r4.core.ProdCharacteristic getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

