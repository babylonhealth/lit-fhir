// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/r4/core/resources/substance_source_material.proto

package com.google.fhir.r4.core;

public interface SubstanceSourceMaterialOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.fhir.r4.core.SubstanceSourceMaterial)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Logical id of this artifact
   * </pre>
   *
   * <code>.google.fhir.r4.core.Id id = 1;</code>
   *
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   *
   *
   * <pre>
   * Logical id of this artifact
   * </pre>
   *
   * <code>.google.fhir.r4.core.Id id = 1;</code>
   *
   * @return The id.
   */
  com.google.fhir.r4.core.Id getId();
  /**
   *
   *
   * <pre>
   * Logical id of this artifact
   * </pre>
   *
   * <code>.google.fhir.r4.core.Id id = 1;</code>
   */
  com.google.fhir.r4.core.IdOrBuilder getIdOrBuilder();

  /**
   *
   *
   * <pre>
   * Metadata about the resource
   * </pre>
   *
   * <code>.google.fhir.r4.core.Meta meta = 2;</code>
   *
   * @return Whether the meta field is set.
   */
  boolean hasMeta();
  /**
   *
   *
   * <pre>
   * Metadata about the resource
   * </pre>
   *
   * <code>.google.fhir.r4.core.Meta meta = 2;</code>
   *
   * @return The meta.
   */
  com.google.fhir.r4.core.Meta getMeta();
  /**
   *
   *
   * <pre>
   * Metadata about the resource
   * </pre>
   *
   * <code>.google.fhir.r4.core.Meta meta = 2;</code>
   */
  com.google.fhir.r4.core.MetaOrBuilder getMetaOrBuilder();

  /**
   *
   *
   * <pre>
   * A set of rules under which this content was created
   * </pre>
   *
   * <code>.google.fhir.r4.core.Uri implicit_rules = 3;</code>
   *
   * @return Whether the implicitRules field is set.
   */
  boolean hasImplicitRules();
  /**
   *
   *
   * <pre>
   * A set of rules under which this content was created
   * </pre>
   *
   * <code>.google.fhir.r4.core.Uri implicit_rules = 3;</code>
   *
   * @return The implicitRules.
   */
  com.google.fhir.r4.core.Uri getImplicitRules();
  /**
   *
   *
   * <pre>
   * A set of rules under which this content was created
   * </pre>
   *
   * <code>.google.fhir.r4.core.Uri implicit_rules = 3;</code>
   */
  com.google.fhir.r4.core.UriOrBuilder getImplicitRulesOrBuilder();

  /**
   *
   *
   * <pre>
   * Language of the resource content
   * </pre>
   *
   * <code>.google.fhir.r4.core.Code language = 4;</code>
   *
   * @return Whether the language field is set.
   */
  boolean hasLanguage();
  /**
   *
   *
   * <pre>
   * Language of the resource content
   * </pre>
   *
   * <code>.google.fhir.r4.core.Code language = 4;</code>
   *
   * @return The language.
   */
  com.google.fhir.r4.core.Code getLanguage();
  /**
   *
   *
   * <pre>
   * Language of the resource content
   * </pre>
   *
   * <code>.google.fhir.r4.core.Code language = 4;</code>
   */
  com.google.fhir.r4.core.CodeOrBuilder getLanguageOrBuilder();

  /**
   *
   *
   * <pre>
   * Text summary of the resource, for human interpretation
   * </pre>
   *
   * <code>.google.fhir.r4.core.Narrative text = 5;</code>
   *
   * @return Whether the text field is set.
   */
  boolean hasText();
  /**
   *
   *
   * <pre>
   * Text summary of the resource, for human interpretation
   * </pre>
   *
   * <code>.google.fhir.r4.core.Narrative text = 5;</code>
   *
   * @return The text.
   */
  com.google.fhir.r4.core.Narrative getText();
  /**
   *
   *
   * <pre>
   * Text summary of the resource, for human interpretation
   * </pre>
   *
   * <code>.google.fhir.r4.core.Narrative text = 5;</code>
   */
  com.google.fhir.r4.core.NarrativeOrBuilder getTextOrBuilder();

  /**
   *
   *
   * <pre>
   * Contained, inline Resources
   * </pre>
   *
   * <code>repeated .google.protobuf.Any contained = 6;</code>
   */
  java.util.List<com.google.protobuf.Any> getContainedList();
  /**
   *
   *
   * <pre>
   * Contained, inline Resources
   * </pre>
   *
   * <code>repeated .google.protobuf.Any contained = 6;</code>
   */
  com.google.protobuf.Any getContained(int index);
  /**
   *
   *
   * <pre>
   * Contained, inline Resources
   * </pre>
   *
   * <code>repeated .google.protobuf.Any contained = 6;</code>
   */
  int getContainedCount();
  /**
   *
   *
   * <pre>
   * Contained, inline Resources
   * </pre>
   *
   * <code>repeated .google.protobuf.Any contained = 6;</code>
   */
  java.util.List<? extends com.google.protobuf.AnyOrBuilder> getContainedOrBuilderList();
  /**
   *
   *
   * <pre>
   * Contained, inline Resources
   * </pre>
   *
   * <code>repeated .google.protobuf.Any contained = 6;</code>
   */
  com.google.protobuf.AnyOrBuilder getContainedOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 8;</code>
   */
  java.util.List<com.google.fhir.r4.core.Extension> getExtensionList();
  /**
   *
   *
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 8;</code>
   */
  com.google.fhir.r4.core.Extension getExtension(int index);
  /**
   *
   *
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 8;</code>
   */
  int getExtensionCount();
  /**
   *
   *
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 8;</code>
   */
  java.util.List<? extends com.google.fhir.r4.core.ExtensionOrBuilder> getExtensionOrBuilderList();
  /**
   *
   *
   * <pre>
   * Additional content defined by implementations
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension extension = 8;</code>
   */
  com.google.fhir.r4.core.ExtensionOrBuilder getExtensionOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * Extensions that cannot be ignored
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 9;</code>
   */
  java.util.List<com.google.fhir.r4.core.Extension> getModifierExtensionList();
  /**
   *
   *
   * <pre>
   * Extensions that cannot be ignored
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 9;</code>
   */
  com.google.fhir.r4.core.Extension getModifierExtension(int index);
  /**
   *
   *
   * <pre>
   * Extensions that cannot be ignored
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 9;</code>
   */
  int getModifierExtensionCount();
  /**
   *
   *
   * <pre>
   * Extensions that cannot be ignored
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 9;</code>
   */
  java.util.List<? extends com.google.fhir.r4.core.ExtensionOrBuilder>
      getModifierExtensionOrBuilderList();
  /**
   *
   *
   * <pre>
   * Extensions that cannot be ignored
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Extension modifier_extension = 9;</code>
   */
  com.google.fhir.r4.core.ExtensionOrBuilder getModifierExtensionOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * General high level classification of the source material specific to the
   * origin of the material
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept source_material_class = 10;</code>
   *
   * @return Whether the sourceMaterialClass field is set.
   */
  boolean hasSourceMaterialClass();
  /**
   *
   *
   * <pre>
   * General high level classification of the source material specific to the
   * origin of the material
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept source_material_class = 10;</code>
   *
   * @return The sourceMaterialClass.
   */
  com.google.fhir.r4.core.CodeableConcept getSourceMaterialClass();
  /**
   *
   *
   * <pre>
   * General high level classification of the source material specific to the
   * origin of the material
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept source_material_class = 10;</code>
   */
  com.google.fhir.r4.core.CodeableConceptOrBuilder getSourceMaterialClassOrBuilder();

  /**
   *
   *
   * <pre>
   * The type of the source material shall be specified based on a controlled
   * vocabulary. For vaccines, this subclause refers to the class of infectious
   * agent
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept source_material_type = 11;</code>
   *
   * @return Whether the sourceMaterialType field is set.
   */
  boolean hasSourceMaterialType();
  /**
   *
   *
   * <pre>
   * The type of the source material shall be specified based on a controlled
   * vocabulary. For vaccines, this subclause refers to the class of infectious
   * agent
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept source_material_type = 11;</code>
   *
   * @return The sourceMaterialType.
   */
  com.google.fhir.r4.core.CodeableConcept getSourceMaterialType();
  /**
   *
   *
   * <pre>
   * The type of the source material shall be specified based on a controlled
   * vocabulary. For vaccines, this subclause refers to the class of infectious
   * agent
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept source_material_type = 11;</code>
   */
  com.google.fhir.r4.core.CodeableConceptOrBuilder getSourceMaterialTypeOrBuilder();

  /**
   *
   *
   * <pre>
   * The state of the source material when extracted
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept source_material_state = 12;</code>
   *
   * @return Whether the sourceMaterialState field is set.
   */
  boolean hasSourceMaterialState();
  /**
   *
   *
   * <pre>
   * The state of the source material when extracted
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept source_material_state = 12;</code>
   *
   * @return The sourceMaterialState.
   */
  com.google.fhir.r4.core.CodeableConcept getSourceMaterialState();
  /**
   *
   *
   * <pre>
   * The state of the source material when extracted
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept source_material_state = 12;</code>
   */
  com.google.fhir.r4.core.CodeableConceptOrBuilder getSourceMaterialStateOrBuilder();

  /**
   *
   *
   * <pre>
   * The unique identifier associated with the source material parent organism
   * shall be specified
   * </pre>
   *
   * <code>.google.fhir.r4.core.Identifier organism_id = 13;</code>
   *
   * @return Whether the organismId field is set.
   */
  boolean hasOrganismId();
  /**
   *
   *
   * <pre>
   * The unique identifier associated with the source material parent organism
   * shall be specified
   * </pre>
   *
   * <code>.google.fhir.r4.core.Identifier organism_id = 13;</code>
   *
   * @return The organismId.
   */
  com.google.fhir.r4.core.Identifier getOrganismId();
  /**
   *
   *
   * <pre>
   * The unique identifier associated with the source material parent organism
   * shall be specified
   * </pre>
   *
   * <code>.google.fhir.r4.core.Identifier organism_id = 13;</code>
   */
  com.google.fhir.r4.core.IdentifierOrBuilder getOrganismIdOrBuilder();

  /**
   *
   *
   * <pre>
   * The organism accepted Scientific name shall be provided based on the
   * organism taxonomy
   * </pre>
   *
   * <code>.google.fhir.r4.core.String organism_name = 14;</code>
   *
   * @return Whether the organismName field is set.
   */
  boolean hasOrganismName();
  /**
   *
   *
   * <pre>
   * The organism accepted Scientific name shall be provided based on the
   * organism taxonomy
   * </pre>
   *
   * <code>.google.fhir.r4.core.String organism_name = 14;</code>
   *
   * @return The organismName.
   */
  com.google.fhir.r4.core.String getOrganismName();
  /**
   *
   *
   * <pre>
   * The organism accepted Scientific name shall be provided based on the
   * organism taxonomy
   * </pre>
   *
   * <code>.google.fhir.r4.core.String organism_name = 14;</code>
   */
  com.google.fhir.r4.core.StringOrBuilder getOrganismNameOrBuilder();

  /**
   *
   *
   * <pre>
   * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of
   * the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant)
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Identifier parent_substance_id = 15;</code>
   */
  java.util.List<com.google.fhir.r4.core.Identifier> getParentSubstanceIdList();
  /**
   *
   *
   * <pre>
   * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of
   * the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant)
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Identifier parent_substance_id = 15;</code>
   */
  com.google.fhir.r4.core.Identifier getParentSubstanceId(int index);
  /**
   *
   *
   * <pre>
   * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of
   * the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant)
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Identifier parent_substance_id = 15;</code>
   */
  int getParentSubstanceIdCount();
  /**
   *
   *
   * <pre>
   * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of
   * the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant)
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Identifier parent_substance_id = 15;</code>
   */
  java.util.List<? extends com.google.fhir.r4.core.IdentifierOrBuilder>
      getParentSubstanceIdOrBuilderList();
  /**
   *
   *
   * <pre>
   * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of
   * the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant)
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.Identifier parent_substance_id = 15;</code>
   */
  com.google.fhir.r4.core.IdentifierOrBuilder getParentSubstanceIdOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * The parent substance of the Herbal Drug, or Herbal preparation
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String parent_substance_name = 16;</code>
   */
  java.util.List<com.google.fhir.r4.core.String> getParentSubstanceNameList();
  /**
   *
   *
   * <pre>
   * The parent substance of the Herbal Drug, or Herbal preparation
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String parent_substance_name = 16;</code>
   */
  com.google.fhir.r4.core.String getParentSubstanceName(int index);
  /**
   *
   *
   * <pre>
   * The parent substance of the Herbal Drug, or Herbal preparation
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String parent_substance_name = 16;</code>
   */
  int getParentSubstanceNameCount();
  /**
   *
   *
   * <pre>
   * The parent substance of the Herbal Drug, or Herbal preparation
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String parent_substance_name = 16;</code>
   */
  java.util.List<? extends com.google.fhir.r4.core.StringOrBuilder>
      getParentSubstanceNameOrBuilderList();
  /**
   *
   *
   * <pre>
   * The parent substance of the Herbal Drug, or Herbal preparation
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String parent_substance_name = 16;</code>
   */
  com.google.fhir.r4.core.StringOrBuilder getParentSubstanceNameOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * The country where the plant material is harvested or the countries where
   * the plasma is sourced from as laid down in accordance with the Plasma
   * Master File. For “Plasma-derived substances” the attribute country of
   * origin provides information about the countries used for the manufacturing
   * of the Cryopoor plama or Crioprecipitate
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.CodeableConcept country_of_origin = 17;</code>
   */
  java.util.List<com.google.fhir.r4.core.CodeableConcept> getCountryOfOriginList();
  /**
   *
   *
   * <pre>
   * The country where the plant material is harvested or the countries where
   * the plasma is sourced from as laid down in accordance with the Plasma
   * Master File. For “Plasma-derived substances” the attribute country of
   * origin provides information about the countries used for the manufacturing
   * of the Cryopoor plama or Crioprecipitate
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.CodeableConcept country_of_origin = 17;</code>
   */
  com.google.fhir.r4.core.CodeableConcept getCountryOfOrigin(int index);
  /**
   *
   *
   * <pre>
   * The country where the plant material is harvested or the countries where
   * the plasma is sourced from as laid down in accordance with the Plasma
   * Master File. For “Plasma-derived substances” the attribute country of
   * origin provides information about the countries used for the manufacturing
   * of the Cryopoor plama or Crioprecipitate
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.CodeableConcept country_of_origin = 17;</code>
   */
  int getCountryOfOriginCount();
  /**
   *
   *
   * <pre>
   * The country where the plant material is harvested or the countries where
   * the plasma is sourced from as laid down in accordance with the Plasma
   * Master File. For “Plasma-derived substances” the attribute country of
   * origin provides information about the countries used for the manufacturing
   * of the Cryopoor plama or Crioprecipitate
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.CodeableConcept country_of_origin = 17;</code>
   */
  java.util.List<? extends com.google.fhir.r4.core.CodeableConceptOrBuilder>
      getCountryOfOriginOrBuilderList();
  /**
   *
   *
   * <pre>
   * The country where the plant material is harvested or the countries where
   * the plasma is sourced from as laid down in accordance with the Plasma
   * Master File. For “Plasma-derived substances” the attribute country of
   * origin provides information about the countries used for the manufacturing
   * of the Cryopoor plama or Crioprecipitate
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.CodeableConcept country_of_origin = 17;</code>
   */
  com.google.fhir.r4.core.CodeableConceptOrBuilder getCountryOfOriginOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * The place/region where the plant is harvested or the places/regions where
   * the animal source material has its habitat
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String geographical_location = 18;</code>
   */
  java.util.List<com.google.fhir.r4.core.String> getGeographicalLocationList();
  /**
   *
   *
   * <pre>
   * The place/region where the plant is harvested or the places/regions where
   * the animal source material has its habitat
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String geographical_location = 18;</code>
   */
  com.google.fhir.r4.core.String getGeographicalLocation(int index);
  /**
   *
   *
   * <pre>
   * The place/region where the plant is harvested or the places/regions where
   * the animal source material has its habitat
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String geographical_location = 18;</code>
   */
  int getGeographicalLocationCount();
  /**
   *
   *
   * <pre>
   * The place/region where the plant is harvested or the places/regions where
   * the animal source material has its habitat
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String geographical_location = 18;</code>
   */
  java.util.List<? extends com.google.fhir.r4.core.StringOrBuilder>
      getGeographicalLocationOrBuilderList();
  /**
   *
   *
   * <pre>
   * The place/region where the plant is harvested or the places/regions where
   * the animal source material has its habitat
   * </pre>
   *
   * <code>repeated .google.fhir.r4.core.String geographical_location = 18;</code>
   */
  com.google.fhir.r4.core.StringOrBuilder getGeographicalLocationOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * Stage of life for animals, plants, insects and microorganisms. This
   * information shall be provided only when the substance is significantly
   * different in these stages (e.g. foetal bovine serum)
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept development_stage = 19;</code>
   *
   * @return Whether the developmentStage field is set.
   */
  boolean hasDevelopmentStage();
  /**
   *
   *
   * <pre>
   * Stage of life for animals, plants, insects and microorganisms. This
   * information shall be provided only when the substance is significantly
   * different in these stages (e.g. foetal bovine serum)
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept development_stage = 19;</code>
   *
   * @return The developmentStage.
   */
  com.google.fhir.r4.core.CodeableConcept getDevelopmentStage();
  /**
   *
   *
   * <pre>
   * Stage of life for animals, plants, insects and microorganisms. This
   * information shall be provided only when the substance is significantly
   * different in these stages (e.g. foetal bovine serum)
   * </pre>
   *
   * <code>.google.fhir.r4.core.CodeableConcept development_stage = 19;</code>
   */
  com.google.fhir.r4.core.CodeableConceptOrBuilder getDevelopmentStageOrBuilder();

  /**
   * <code>
   * repeated .google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription fraction_description = 20;
   * </code>
   */
  java.util.List<com.google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription>
      getFractionDescriptionList();
  /**
   * <code>
   * repeated .google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription fraction_description = 20;
   * </code>
   */
  com.google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription getFractionDescription(
      int index);
  /**
   * <code>
   * repeated .google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription fraction_description = 20;
   * </code>
   */
  int getFractionDescriptionCount();
  /**
   * <code>
   * repeated .google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription fraction_description = 20;
   * </code>
   */
  java.util.List<
          ? extends com.google.fhir.r4.core.SubstanceSourceMaterial.FractionDescriptionOrBuilder>
      getFractionDescriptionOrBuilderList();
  /**
   * <code>
   * repeated .google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription fraction_description = 20;
   * </code>
   */
  com.google.fhir.r4.core.SubstanceSourceMaterial.FractionDescriptionOrBuilder
      getFractionDescriptionOrBuilder(int index);

  /**
   * <code>.google.fhir.r4.core.SubstanceSourceMaterial.Organism organism = 21;</code>
   *
   * @return Whether the organism field is set.
   */
  boolean hasOrganism();
  /**
   * <code>.google.fhir.r4.core.SubstanceSourceMaterial.Organism organism = 21;</code>
   *
   * @return The organism.
   */
  com.google.fhir.r4.core.SubstanceSourceMaterial.Organism getOrganism();
  /** <code>.google.fhir.r4.core.SubstanceSourceMaterial.Organism organism = 21;</code> */
  com.google.fhir.r4.core.SubstanceSourceMaterial.OrganismOrBuilder getOrganismOrBuilder();

  /**
   * <code>
   * repeated .google.fhir.r4.core.SubstanceSourceMaterial.PartDescription part_description = 22;
   * </code>
   */
  java.util.List<com.google.fhir.r4.core.SubstanceSourceMaterial.PartDescription>
      getPartDescriptionList();
  /**
   * <code>
   * repeated .google.fhir.r4.core.SubstanceSourceMaterial.PartDescription part_description = 22;
   * </code>
   */
  com.google.fhir.r4.core.SubstanceSourceMaterial.PartDescription getPartDescription(int index);
  /**
   * <code>
   * repeated .google.fhir.r4.core.SubstanceSourceMaterial.PartDescription part_description = 22;
   * </code>
   */
  int getPartDescriptionCount();
  /**
   * <code>
   * repeated .google.fhir.r4.core.SubstanceSourceMaterial.PartDescription part_description = 22;
   * </code>
   */
  java.util.List<? extends com.google.fhir.r4.core.SubstanceSourceMaterial.PartDescriptionOrBuilder>
      getPartDescriptionOrBuilderList();
  /**
   * <code>
   * repeated .google.fhir.r4.core.SubstanceSourceMaterial.PartDescription part_description = 22;
   * </code>
   */
  com.google.fhir.r4.core.SubstanceSourceMaterial.PartDescriptionOrBuilder
      getPartDescriptionOrBuilder(int index);
}
