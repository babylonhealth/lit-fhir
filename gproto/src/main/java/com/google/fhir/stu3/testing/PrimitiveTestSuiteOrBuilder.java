// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/google/fhir/proto/stu3/primitive_test_suite.proto

package com.google.fhir.stu3.testing;

public interface PrimitiveTestSuiteOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.fhir.stu3.testing.PrimitiveTestSuite)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Note: The test suite will fail if any of these are empty.
   * </pre>
   *
   * <code>repeated .google.fhir.stu3.testing.ValidPair valid_pairs = 1;</code>
   */
  java.util.List<com.google.fhir.stu3.testing.ValidPair> 
      getValidPairsList();
  /**
   * <pre>
   * Note: The test suite will fail if any of these are empty.
   * </pre>
   *
   * <code>repeated .google.fhir.stu3.testing.ValidPair valid_pairs = 1;</code>
   */
  com.google.fhir.stu3.testing.ValidPair getValidPairs(int index);
  /**
   * <pre>
   * Note: The test suite will fail if any of these are empty.
   * </pre>
   *
   * <code>repeated .google.fhir.stu3.testing.ValidPair valid_pairs = 1;</code>
   */
  int getValidPairsCount();
  /**
   * <pre>
   * Note: The test suite will fail if any of these are empty.
   * </pre>
   *
   * <code>repeated .google.fhir.stu3.testing.ValidPair valid_pairs = 1;</code>
   */
  java.util.List<? extends com.google.fhir.stu3.testing.ValidPairOrBuilder> 
      getValidPairsOrBuilderList();
  /**
   * <pre>
   * Note: The test suite will fail if any of these are empty.
   * </pre>
   *
   * <code>repeated .google.fhir.stu3.testing.ValidPair valid_pairs = 1;</code>
   */
  com.google.fhir.stu3.testing.ValidPairOrBuilder getValidPairsOrBuilder(
      int index);

  /**
   * <code>repeated string invalid_json = 2;</code>
   * @return A list containing the invalidJson.
   */
  java.util.List<java.lang.String>
      getInvalidJsonList();
  /**
   * <code>repeated string invalid_json = 2;</code>
   * @return The count of invalidJson.
   */
  int getInvalidJsonCount();
  /**
   * <code>repeated string invalid_json = 2;</code>
   * @param index The index of the element to return.
   * @return The invalidJson at the given index.
   */
  java.lang.String getInvalidJson(int index);
  /**
   * <code>repeated string invalid_json = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the invalidJson at the given index.
   */
  com.google.protobuf.ByteString
      getInvalidJsonBytes(int index);

  /**
   * <code>repeated .google.fhir.stu3.testing.PrimitiveProtoUnion invalid_protos = 3;</code>
   */
  java.util.List<com.google.fhir.stu3.testing.PrimitiveProtoUnion> 
      getInvalidProtosList();
  /**
   * <code>repeated .google.fhir.stu3.testing.PrimitiveProtoUnion invalid_protos = 3;</code>
   */
  com.google.fhir.stu3.testing.PrimitiveProtoUnion getInvalidProtos(int index);
  /**
   * <code>repeated .google.fhir.stu3.testing.PrimitiveProtoUnion invalid_protos = 3;</code>
   */
  int getInvalidProtosCount();
  /**
   * <code>repeated .google.fhir.stu3.testing.PrimitiveProtoUnion invalid_protos = 3;</code>
   */
  java.util.List<? extends com.google.fhir.stu3.testing.PrimitiveProtoUnionOrBuilder> 
      getInvalidProtosOrBuilderList();
  /**
   * <code>repeated .google.fhir.stu3.testing.PrimitiveProtoUnion invalid_protos = 3;</code>
   */
  com.google.fhir.stu3.testing.PrimitiveProtoUnionOrBuilder getInvalidProtosOrBuilder(
      int index);

  /**
   * <pre>
   * If it's impossible to formulate an invalid proto, set this string
   * so that the tests don't fail.
   * E.g., Boolean uses a boolean value datatype, so all values are valid
   * </pre>
   *
   * <code>string no_invalid_protos_reason = 4;</code>
   * @return The noInvalidProtosReason.
   */
  java.lang.String getNoInvalidProtosReason();
  /**
   * <pre>
   * If it's impossible to formulate an invalid proto, set this string
   * so that the tests don't fail.
   * E.g., Boolean uses a boolean value datatype, so all values are valid
   * </pre>
   *
   * <code>string no_invalid_protos_reason = 4;</code>
   * @return The bytes for noInvalidProtosReason.
   */
  com.google.protobuf.ByteString
      getNoInvalidProtosReasonBytes();
}
