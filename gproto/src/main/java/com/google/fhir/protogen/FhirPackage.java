//    Copyright 2019 Google LLC
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

package com.google.fhir.protogen;

import static java.nio.charset.StandardCharsets.UTF_8;

import com.google.common.io.ByteStreams;
import com.google.fhir.common.JsonFormat;
import com.google.fhir.common.ResourceUtils;
import com.google.fhir.proto.Annotations.FhirVersion;
import com.google.fhir.proto.PackageInfo;
import com.google.fhir.r4.core.Bundle;
import com.google.fhir.r4.core.CodeSystem;
import com.google.fhir.r4.core.StructureDefinition;
import com.google.fhir.r4.core.ValueSet;
import com.google.protobuf.Message;
import com.google.protobuf.TextFormat;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

/**
 * Struct representing a FHIR Proto package, including defining resources and a PackageInfo proto.
 * This is constructed from a zip file containing these files, as generated by the `fhir_package`
 * rule in protogen.bzl.
 */
public class FhirPackage {
  public final PackageInfo packageInfo;
  public final List<StructureDefinition> structureDefinitions;
  public final List<CodeSystem> codeSystems;
  public final List<ValueSet> valueSets;

  public FhirPackage(
      PackageInfo packageInfo,
      List<StructureDefinition> structureDefinitions,
      List<CodeSystem> codeSystems,
      List<ValueSet> valueSets) {
    this.packageInfo = packageInfo;
    this.structureDefinitions = structureDefinitions;
    this.codeSystems = codeSystems;
    this.valueSets = valueSets;
  }

  @Override
  public boolean equals(Object other) {
    return other instanceof FhirPackage
        && ((FhirPackage) other)
            .packageInfo
            .getProtoPackage()
            .equals(packageInfo.getProtoPackage());
  }

  @Override
  public int hashCode() {
    return packageInfo.getProtoPackage().hashCode();
  }

  public static FhirPackage load(String zipFilePath) throws IOException {
    ZipFile zipFile = new ZipFile(new File(zipFilePath));
    Enumeration<? extends ZipEntry> entries = zipFile.entries();

    PackageInfo packageInfo = null;
    Map<String, String> jsonFiles = new HashMap<>();

    while (entries.hasMoreElements()) {
      ZipEntry entry = entries.nextElement();
      if (entry.getName().endsWith("package_info.prototxt")) {
        String protoTxt = new String(ByteStreams.toByteArray(zipFile.getInputStream(entry)), UTF_8);
        PackageInfo.Builder infoBuilder = PackageInfo.newBuilder();
        TextFormat.getParser().merge(protoTxt, infoBuilder);
        packageInfo = infoBuilder.build();
        if (packageInfo.getProtoPackage().isEmpty()) {
          throw new IllegalArgumentException(
              "Missing proto_package from PackageInfo in " + zipFilePath);
        }
        if (packageInfo.getFhirVersion() == FhirVersion.FHIR_VERSION_UNKNOWN) {
          throw new IllegalArgumentException(
              "Missing fhir_version from PackageInfo in " + zipFilePath);
        }
      } else if (entry.getName().endsWith(".json")) {
        String json = new String(ByteStreams.toByteArray(zipFile.getInputStream(entry)), UTF_8);
        jsonFiles.put(entry.getName(), json);
      }
    }

    if (packageInfo == null) {
      throw new IllegalArgumentException(
          "FhirPackage does not have a valid package_info.prototxt: " + zipFilePath);
    }

    List<ValueSet> valueSets = new ArrayList<>();
    List<CodeSystem> codeSystems = new ArrayList<>();
    List<StructureDefinition> structureDefinitions = new ArrayList<>();
    JsonFormat.Parser parser = JsonFormat.getSpecParser(packageInfo.getFhirVersion());

    for (Map.Entry<String, String> jsonFile : jsonFiles.entrySet()) {
      String json = jsonFile.getValue();
      Optional<String> expectedType = getResourceType(json);
      if (!expectedType.isPresent()) {
        System.out.println("Unhandled JSON entry: " + jsonFile.getKey());
        continue;
      }

      if (expectedType.get().equals("ValueSet")) {
        valueSets.add(parser.merge(json, ValueSet.newBuilder()).build());
      } else if (expectedType.get().equals("CodeSystem")) {
        codeSystems.add(parser.merge(json, CodeSystem.newBuilder()).build());
      } else if (expectedType.get().equals("StructureDefinition")) {
        structureDefinitions.add(parser.merge(json, StructureDefinition.newBuilder()).build());
      } else if (expectedType.get().equals("Bundle")) {
        Bundle bundle = parser.merge(json, Bundle.newBuilder()).build();
        for (Bundle.Entry bundleEntry : bundle.getEntryList()) {
          Message contained = ResourceUtils.getContainedResource(bundleEntry.getResource());
          if (contained instanceof ValueSet) {
            valueSets.add((ValueSet) contained);
          } else if (contained instanceof CodeSystem) {
            codeSystems.add((CodeSystem) contained);
          } else if (contained instanceof StructureDefinition) {
            structureDefinitions.add((StructureDefinition) contained);
          }
        }
      } else {
        System.out.println("Unhandled JSON entry: " + jsonFile.getKey());
      }
    }
    if (packageInfo == null) {
      throw new IllegalArgumentException(
          "No package info file found in "
              + zipFilePath
              + ".  The package info file must end in package_info.prototxt");
    }
    return new FhirPackage(packageInfo, structureDefinitions, codeSystems, valueSets);
  }

  FhirPackage filterResources(Predicate<StructureDefinition> filter) {
    return new FhirPackage(
        packageInfo,
        structureDefinitions.stream().filter(filter).collect(Collectors.toList()),
        codeSystems,
        valueSets);
  }

  private static final Pattern RESOURCE_TYPE_PATTERN =
      Pattern.compile("\"resourceType\"\\s*:\\s*\"([A-Za-z]*)\"");

  private static Optional<String> getResourceType(String json) {
    Matcher matcher = RESOURCE_TYPE_PATTERN.matcher(json);
    return matcher.find() ? Optional.of(matcher.group(1)) : Optional.empty();
  }
}
